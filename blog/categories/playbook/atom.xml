<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: playbook | Tony Lukasavage]]></title>
  <link href="http://tonylukasavage.github.com/blog/categories/playbook/atom.xml" rel="self"/>
  <link href="http://tonylukasavage.github.com/"/>
  <updated>2015-03-25T12:19:28-04:00</updated>
  <id>http://tonylukasavage.github.com/</id>
  <author>
    <name><![CDATA[Tony Lukasavage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mobile Developer's Icon &amp; Image Checklist]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/03/24/mobile-developer-s-icon--amp--image-checklist/"/>
    <updated>2011-03-24T09:51:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/03/24/mobile-developer-s-icon--amp--image-checklist</id>
    <content type="html"><![CDATA[<h2>Overview</h2>


<p>If there's one thing I've learned from delving into iOS, Android, and Blackberry app development, it's that there's a lot more to creating a mobile app than just coding it.  One of the things that can catch you off guard, especially if you are devoid of design ability like me, is the amount of icons and images necessary to deploy your apps.  This becomes even more daunting when you intend to deploy to multiple platforms.</p>

<p>The other concern is that it isn't always evident from the development tools how many different graphics you need to account for all scenarios.  A new iOS developer will likely be unaware that you need a 58x58 pixel icon for iPhone 4 Spotlight and Settings.  To attempt to alleviate some of this confusion, I put together these charts to detail what I know so far about the graphics required for submitting mobile apps to the various Android, iOS, and Blackberry markets.</p>

<h2>Icons</h2>


<table class="compareTable" border="1" cellspacing="0" cellpadding="0" style="margin-bottom:25px;">
<tbody>
<tr class="topHeader odd">
<td width="10%"></td>
<td width="15%">Android</td>
<td width="15%">iOS</td>
<td width="15%">Blackberry Playbook</td>
<td width="45%">Notes</td>
</tr>
<tr>
<td class="leftHeader">29x29</td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td class="notes">iPhone Settings and Spotlight, iPad Settings</td>
</tr>
<tr class="odd">
<td class="leftHeader">36x36</td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td></td>
<td class="notes">low pixel density icon</td>
</tr>
<tr>
<td class="leftHeader">48x48</td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td></td>
<td class="notes">medium pixel density icon</td>
</tr>
<tr class="odd">
<td class="leftHeader">50x50</td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td class="notes">iPad Spotlight. iOS will trim 1 pixel off each side and add a drop shadow, making it 48x48</td>
</tr>
<tr>
<td class="leftHeader">57x57</td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td class="notes">standard iPhone icon</td>
</tr>
<tr class="odd">
<td class="leftHeader">58x58</td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td class="notes">iPhone 4 Settings and Spotlight</td>
</tr>
<tr>
<td class="leftHeader">64x64</td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/warn.jpg" alt="" /></td>
<td></td>
<td class="notes">optional small custom document icon</td>
</tr>
<tr class="odd">
<td class="leftHeader">72x72</td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td class="notes">Android high pixel density icon, iPad icon</td>
</tr>
<td class="leftHeader">86x86</td>
<td></td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td class="notes">standard Playbook icon. It will trim 5 pixels off each side, making it 76x76</td>
</tr>
<tr class="odd">
<td class="leftHeader">96x96</td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/warn.jpg" alt="" /></td>
<td></td>
<td class="notes">Potential icon size if iPad gets a high ppi screen</td>
</tr>
<tr>
<td class="leftHeader">114x114</td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td class="notes">standard iPhone 4 icon</td>
</tr>
<tr class="odd">
<td class="leftHeader">144x144</td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/warn.jpg" alt="" /></td>
<td></td>
<td class="notes">Potential icon size if iPad gets a high ppi screen</td>
</tr>
<tr>
<td class="leftHeader">320x320</td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/warn.jpg" alt="" /></td>
<td></td>
<td class="notes">optional large custom document icon</td>
</tr>
</tbody>
</table>




<br><br>




<h2>Distribution Images</h2>


<table class="compareTable" border="1" cellspacing="0" cellpadding="0" style="margin-bottom:25px;">
<tbody>
<tr class="topHeader odd">
<td width="10%"></td>
<td width="15%">Android Market</td>
<td width="15%">Apple App Store</td>
<td width="15%">Blackberry App World</td>
<td width="15%">Amazon App Store</td>
<td width="30%">Notes</td>
</tr>
<tr>
<td class="leftHeader">screenshot sizes</td>
<td>320x480, 480x800, 480x854, 1280x800</td>
<td><strong>iPhone</strong>: 320x480, 480x320, 320x460, 480x300 <strong>iPhone 4</strong>: 640x960, 960x640 <strong>iPad</strong>: 768x1024, 1024x768, 748x1024, 1004x768</td>
<td>640x640 or smaller</td>
<td>480x854, 854x480</td>
<td class="notes">required # of screenshots:
<strong>Android</strong>: at least 2
<strong>Apple</strong>: at least 1
<strong>Blackberry</strong>: 1-50
<strong>Amazon</strong>: 3-10</td>
</tr>
<tr class="odd">
<td class="leftHeader">114x114</td>
<td></td>
<td></td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td class="notes">device icon</td>
</tr>
<tr>
<td class="leftHeader">180x120</td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td></td>
<td></td>
<td class="notes">Promotional graphic (no alpha)</td>
</tr>
<tr class="odd">
<td class="leftHeader">480x480</td>
<td></td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td class="notes">Product icon that should match your 86x86 icon</td>
</tr>
<tr>
<td class="leftHeader">512x512</td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td class="notes">Large/High resolution product icon</td>
</tr>
<tr class="odd">
<td class="leftHeader">1024x500</td>
<td><img src="http://tonylukasavage.github.com/images/yes.gif" alt="" /></td>
<td></td>
<td></td>
<td></td>
<td class="notes">Feature graphic for market</td>
</tr>
</tbody>
</table>




<h2>Additional Notes</h2>


<p><strong>For Android</strong>, your 36x36, 48x48, and 72x72 pixel icons should be placed in the <strong>drawable-ldpi</strong>, <strong>drawable-mdpi</strong>, and <strong>drawable-hdpi</strong> folders of your Android project respectively.  Be sure to specify the name of the file you will be using in the <strong>android:icon</strong> attribute of the <strong><application></strong> element in your AndroidManifest.xml file.  Android also allows you to include a promotional video.</p>

<p><strong>For iOS</strong> you simply need to add your appropriately sized and named icons to your <strong>Resources</strong> directory in your XCode project.  Here's a mapping of the icon sizes to the required name of the icon file. <strong>NOTE</strong>: There is purposely no extension on the 512x512 iTunesArtwork file.</p>

<ul>
<li>29x29 - Icon-Small.png</li>
<li>50x50 - Icon-Small-50.png</li>
<li>57x57 - Icon.png</li>
<li>58x58 - Icon-Small@2x.png</li>
<li>72x72 - Icon-72.png</li>
<li>114x114 - Icon@2x.png</li>
<li>512x512 - iTunesArtwork</li>
</ul>


<p><strong>For Blackberry Playbook</strong>, you need to specify the name of your 86x86 application icon in your application's <strong>blackberry-tablet.xml</strong> file.  Below is a sample of how you would set that up.</p>

<p>``` xml
<qnx></p>

<pre><code>&lt;icon&gt;
    &lt;image&gt;86x86.png&lt;/image&gt;
&lt;/icon&gt;
&lt;publisher&gt;My Company&lt;/publisher&gt;
&lt;category&gt;core.games&lt;/category&gt;
&lt;splashscreen&gt;my_splashscreen.jpg&lt;/splashscreen&gt;
</code></pre>

<p></qnx>
```</p>

<p><strong>For the Amazon App Store</strong> you can also submit promotional images of various sizes and up to 5 promotional videos.</p>

<h2>Summary</h2>


<p>So as you can see, you've got a lot to consider when it comes to presenting your mobile application to the masses.  As a developer, I'm looking for the simple solution here.  For me, the easiest thing to do was use this <a href="http://www.command-tab.com/2008/09/20/iphone-and-ipod-touch-icon-template/" target="_blank">512x512 iOS icon template</a>, create my icon, and scale it down to all the required sizes.  If you happen to be reading this post and know a better/easier workflow, please let me know.</p>

<p>Here's a few references to check out to get some additional information on mobile app icons and market images:</p>

<ul>
<li><a href="http://developer.apple.com/library/safari/#documentation/UserExperience/Conceptual/MobileHIG/IconsImages/IconsImages.html" target="_blank">iOS Human Interface Guidelines - Custom Icon and Image Creation Guidelines</a></li>
<li><a href="http://developer.apple.com/library/ios/#qa/qa1686/_index.html" target="_blank">App Icons on iPad and iPhone</a></li>
<li><a href="http://developer.android.com/guide/practices/ui_guidelines/icon_design.html" target="_blank">Android Icon Design Guidelines</a></li>
<li><a href="http://docs.blackberry.com/en/developers/deliverables/22301/Designing_application_icons_tablet_1401556_11.jsp" target="_blank">Blackberry Playbook - Designing Application Icons</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repper for Blackberry Playbook with Full Source]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/03/23/repper-for-blackberry-playbook-with-full-source/"/>
    <updated>2011-03-23T09:09:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/03/23/repper-for-blackberry-playbook-with-full-source</id>
    <content type="html"><![CDATA[<h2>The Code</h2>


<ul style="padding-top: 20px; padding-bottom: 20px;">
    <li><a href="https://github.com/tonylukasavage/Repper-playbook" target="_blank">Repper-playbook on Github</a> -- Full source code and Flash Builder "Burrito" project files</li>
</ul>




<h2>The Overview</h2>


<p>I mentioned this week that if you hustle you can still get yourself a <a href="http://us.blackberry.com/developers/tablet/playbook_offer.jsp" target="_blank">free Blackberry Playbook</a>.  Just follow <a href="http://savagelook.com/blog/actionscript3/procrastinators-guide-to-a-free-blackberry-playbook">my procrastinator's guide</a> and you could very well still have enough time to make it.  I also made posted a while ago the incredibly simple process of porting <a href="https://market.android.com/details?id=air.Repper" target="_blank">Repper</a>, my fitness calculator mobile app written with <a href="http://labs.adobe.com/technologies/flexsdk_hero/" target="_blank">Flex "Hero"</a>, to the Playbook.  If that wasn't enough for you, here's one more bit of charity to motivate to try and beat that March 31st, 2011 deadline to submit an app for a free Playbook.</p>

<p>In the <a href="https://github.com/tonylukasavage/Repper-playbook" target="_blank">Github link</a> at the top I've included the full source and project files for Flash Builder "Burrito" for Repper.  Yep, everything it took to make a Playbook app that was submitted and approved is included within.  Take a look, pull it down, load it up, and see how a simple, functional app can get you a free tablet.  If you are wondering what your time is worth in comparison to the effort necessary, the model that developers are likely to receive (16 GB) is being priced at $500.  Seems a fair trade for a few hours of your time.</p>

<p>So now you have a guide to getting a Blackberry Playbook app submitted as quickly as possible and full source code for a project that has already been approved.  Pair that with the fact that I've not heard of one functional app not being approved, you are completely out of excuses to not cash in on this offer.  Dig in and get it done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procrastinator's Guide to a Free Blackberry Playbook]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/03/21/procrastinator-s-guide-to-a-free-blackberry-playbook/"/>
    <updated>2011-03-21T16:28:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/03/21/procrastinator-s-guide-to-a-free-blackberry-playbook</id>
    <content type="html"><![CDATA[<p>This past week my fitness calculator app, Repper, was approved for the Blackberry App World.  In return for enduring Research in Motion's arduous app submission process, I will be awarded with a free <a href="http://us.blackberry.com/playbook-tablet/" target="_blank">Blackberry Playbook</a> once they are officially released to the public.  Because I'm so pleased with this news, I thought I would share what I perceive as the easiest route to getting your hands on a free Playbook yourself.</p>

<p><span style="color: #ff0000;">You only have til March 31st to submit your app</span>, according to the <a href="http://us.blackberry.com/developers/tablet/playbook_offer.jsp" target="_blank">latest version of their offer</a>.  While this date has been pushed back a number of times, I suspect this may be the hard deadline.  You don't need to be approved by the due date, you just need to have your app submitted.  You may think I'm exaggerating here, but creating the app is the easy part, submitting is the real pain in the ass.</p>

<p>So before I get into too many boring details, let me lay out the list of things you need to do in order to reduce the amount of surprise time sucks you will encounter:</p>

<ul>
    <li><a href="https://appworld.blackberry.com/isvportal/signup/signupterms.seam?pageIndex=1&amp;cid=295177" target="_blank">Sign up to be a Blackberry vendor</a></li>
    <li><a href="https://www.blackberry.com/SignedKeys/" target="_blank">Get your code signing keys</a></li>
    <li><a href="http://us.blackberry.com/developers/tablet/adobe.jsp" target="_blank">Follow the getting started guide</a> for setting up your AS3/Flex development environment (or <a href="http://us.blackberry.com/developers/tablet/webworks.jsp" target="_blank">WebWorks</a> if that's your thing)</li>
    <li>Convert an existing AS3/Flex project or create a new app (<strong>IF YOU ONLY READ ONE SECTION, READ THIS</strong>)</li>
    <li><a href="http://docs.blackberry.com/en/developers/deliverables/23959/Signing_your_application_1422721_11.jsp" target="_blank">Sign</a> and submit your app to the Blackberry App World through the <a href="https://appworld.blackberry.com/isvportal/home/login.seam?pageIndex=1&amp;cid=296029" target="_blank">vendor portal</a>.</li>
    <li>Wait for approval</li>
</ul>


<p>The steps necessary are listed in a very specific order to maximize efficiency, particularly becoming a vendor and getting code signing keys.  Read the section below detailing each step to find out why.  So again, <strong>DO THE STEPS IN ORDER</strong>, it will save you time in the end.</p>

<h2>Sign up to be a Blackberry vendor</h2>


<p>This is simple enough. You just need to fill out a form with relevant personal information do that Blackberry has a record of who you are.  In the early stages of this process you actually needed to submit a notarized letter, if you were an individual and not a company, in order to complete the registration.  From what I understand this is no longer required so it should make your life a little easier.</p>

<p><span style="color: #ff0000;">Blackberry is also waiving their usual $200 registration fee for developers during this period</span>.  So whether or not you plan to hit this deadline, it may be worthwhile just to sign up and get in for free.</p>

<p>You will do this first because this process may take a few business days to complete.  They review the vendor registration submissions and Blackberry has not been terribly quick with approvals at any step in this process.  In fact, that is the most common complaint about the app submission process so far is simply how long it takes to complete.  So get this done first and don't wait for approval to move on to the next step.</p>

<h2>Get your code signing keys</h2>


<p>This is another step that is as simple as filling out forms, but again requires Blackberry's intervention to approve.  Also bear in mind that the code signing key you will receive will only work on one workstation once registered and cannot be transfered to another workstation.  You have to request another key is you want it to work on another workstation.  I have requested 2 keys thus far and both have taken at least 2 business days to arrive via email.</p>

<p><span style="color: #ff0000;">Like the last step, get this done now and don't wait for the key to arrive to move on</span>.  Hopefully by the time you are ready to submit your app to the App World you'll have received your vendor approval and signing key.</p>

<h2>Follow the Getting Started Guide</h2>


<p>I'm not going to go into a great deal of detail here because the Blackberry documentation lays it out very well.  Just follow <a href="http://us.blackberry.com/developers/tablet/adobe.jsp" target="_blank">the guide found here</a> and you'll be fast on your way to your Blackberry Playbook "Hello, World!".</p>

<p>One thing to keep in mind is that you must be building against the 0.9.4 SDK. I initially made the mistake of hanging on to the old 0.9.3 SDK and Blackberry has requested that I rebuild against the latest version before being able to make my app available on the App World.  Its not a huge deal, but will require you to go through the whole app update process if you don't do it right the first time.  That said, they still extended me the offer of the free Playbook without yet having made this change.</p>

<h2>Create your app</h2>


<p>I know, I'm trivializing what sounds like a big step.  But here's the thing: <span style="color: #ff0000;">I've not heard of one Playbook app that has been turned down due to perceived usefulness or quality</span>.  The only apps that I have heard being rejected are ones that actually don't work.  This is common in the case of people trying to implement multitouch or gesture support when the simulator does not properly emulate the behavior.</p>

<p>In other words, put together a simple application that is useful to a niche group.  Or better yet, convert an existing AS3 or Flex Hero project to a Playbook app.  Check out my prior post to see how I did this in literally seconds.</p>

<p>For me, Repper was a no brainer.  It is a simple fitness calculator that determines your 1-15 rep max on exercises.  It was originally built using Flex Hero in Air for Android.  Its currently available on the <a href="https://market.android.com/details?id=air.Repper" target="_blank">Android Market</a> if you wanna take a look at it there.  You can see there is no rocket science.  Blackberry has no high expectations for the functionality of an app for which developers have no device.  KISS is the key factor here.  Wait til you have one of these Playbooks in your hand before you try to get really creative with it.</p>

<p>Don't get me wrong, I'm not encouraging fart app development here.  I'm just saying that at this point in the game Blackberry is happy handing out Playbooks to competent, motivated developers.  The quality of this one app is not what they are banking on.  They are hoping that with their generous gesture that they may woo more than a handful of mobile developers to spend their time on Blackberry Playbook apps rather than iPad or Android tablets.</p>

<p>In short, no excuses.  Create a useful, simple app.  Its not that hard and you know it.</p>

<h2>Submit your app to the App World</h2>


<p>Before digging into the specifics of the submission and signing process, here's the things you'll need:</p>

<ul>
    <li>Your signing certificate (CSJ file)</li>
    <li>A less than 4000 character description of your app</li>
    <li>A 480x480 product image for the App World</li>
    <li>At least one screenshot that is no larger than 640x640</li>
    <li>An 86x86 PNG icon, which includes a 5 pixel transparent buffer around it.  This effectively makes the icon content 76x76 or less.</li>
</ul>


<p>First you are going to sign your release build of your application using your CSJ signing certificate.  This is an intimidating and somewhat complex process.  I highly suggest picking from the choices at the bottom of their <a href="http://docs.blackberry.com/en/developers/deliverables/23959/Signing_your_application_1422721_11.jsp" target="_blank">code signing guide</a> and following them to the letter.  I personally had no problems with the workflow for signing apps through Flash Builder 4.5 "Burrito", but I've heard that some people had issues.  The safest route might be to follow the command line instructions for the entire process.  Again I emphasize, follow the instructions to the letter and don't try to frankenstein multiple guides together, it makes it harder to troubleshoot the issues.</p>

<p>After you have successfully signed your app, you just need to submit it to the App World through the <a href="https://appworld.blackberry.com/isvportal/home/login.seam?pageIndex=1&amp;cid=297207" target="_blank">vendor portal</a>. Just go to "Manage Products" and click the "Add Product..." button.  You will be walked through the steps necessary to submit your signed BAR app file.  So long as you have all the items I mentioned above in the list, and a successfully signed app, it should be pretty smooth sailing.  Finding these things out during the submission process was quite frustrating.</p>

<p>Carve out at least an hour for the above process, because it will take some time.  The code signing can be especially time consuming from the command line, but it seems to be the one sure fire way to get the app successfully signed.</p>

<p>If you followed my advice and became a vendor and requested your signing keys first, you won't find yourself waiting for days once you've reached this part of the process... like I did.</p>

<h2>Wait for approval</h2>


<p>Now that you finally have your app submitted, you just have to sit back and relax... and relax.... and relax... and do your taxes... and ge your car inspected... and renew your driver's license... you get the idea.  It takes a LONG time to get approved.  I've not heard of anyone getting their first app approved in under 2.5 weeks, with many waiting as long as 7.  But once again, as long as you get the app submitted before the deadline, you are still eligible for the free Playbook.</p>

<p>Once you finally do get approved you'll receive an email telling you as much.  It may also include additional steps you must take in order for your app to be made available in the App World, like mine did.  Shortly following this, for me it was a day later, you'll receive a congratulations notice for your free Playbook.  Included in this email should be a link to a purchase order for your Playbook with a cost of $0.00.  <span style="color: #ff0000;">I have not heard of a single case where an app was approved but the developer did not receive a free Playbook offer</span>.  Fill it out, send it in, and join us in the patient wait for the release date.</p>

<p>Hope you follow these steps and find yourself with your very own free Blackberry Playbook too!  Let me know if you happen upon success yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blackberry Playbook Simulator Tips]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/02/23/blackberry-playbook-simulator-tips/"/>
    <updated>2011-02-23T09:41:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/02/23/blackberry-playbook-simulator-tips</id>
    <content type="html"><![CDATA[<h1><span style="font-weight: bold; font-size: 16px;">Overview</span></h1>


<p>Interested in <a href="http://us.blackberry.com/playbook-tablet/?CPID=KNC-kw328392_p6&amp;HBX_PK=rim|005248ec-5d49-ba89-6310-0000150c9969" target="_blank">Blackberry Playbook</a> development?  Well you should be if you want to <a href="http://us.blackberry.com/developers/tablet/v_offer.jsp" target="_blank">get one for free</a>.  And to get one for free, you need to develop for it before the device is even available.  How do we do that?  With the freely available <a href="http://docs.blackberry.com/en/developers/deliverables/25068/Configure_VM_BB_tablet_simulator_1347134_11.jsp" target="_blank">simulator</a>.</p>

<p>While Blackberry does a good job of getting you up and running with their <a href="http://docs.blackberry.com/en/developers/deliverables/25068/" target="_blank">Getting Started guide</a>, they leave a few useful tidbits out about the simulator itself.  How do you minimize apps?  How do you change the orientation of the simulator?  Before we answer that you need to know one bit of information.  The "<strong>bezel</strong>" in the simulator is the black area surrounding the actual Blacberry Playbook OS running in your VMWare virtual machine player.  This is important to know as it is the area where many useful gestures start and end for the simulator.</p>

<p>Now with that in mind, here's a list of items I've found so far that will help you move a little faster in your Playbook development.</p>

<h1><span style="font-weight: bold; font-size: 16px;">Tips</span></h1>


<ul>
    <li><strong>Minimize your running app</strong> by holding the mouse button down while over the bottom bezel, then dragging it up into your app, like a touch "swipe".  The simulator doesn't have an easy, built-in way to close apps once you open them in development.  This tip will let you get back to your Playbook interface if you haven't already coded a custom close or minimize into your app.</li>
    <li><strong>Change orientation</strong> by doing the same as above, but end your "swipe" in the bottom right hand corner of your app.</li>
    <li><strong>Cycle through currently open apps</strong> by mouse "swiping" from either the left or right bezel into your app.  As you might expect this will transition you to the next open app horizontally.</li>
    <li><strong>Quickly find your simulator's IP address</strong> by clicking the hammer icon at the top of the simulator's active screen.</li>
</ul>


<p>And that's what I've got so far.  I'll be sure to update if I find more.  Please share your own tips for the simulator as well.  Good luck and have fun with this cool new device.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Air for Android to Blackberry Playbook in seconds]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/02/21/from-air-for-android-to-blackberry-playbook-in-seconds/"/>
    <updated>2011-02-21T11:19:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/02/21/from-air-for-android-to-blackberry-playbook-in-seconds</id>
    <content type="html"><![CDATA[<h1><span style="font-weight: bold; font-size: 16px;">Overview</span></h1>




<p style="text-align: left;"><strong>NOTE</strong>: all source code is available for <a href="https://github.com/tonylukasavage/Repper" target="_blank">Repper at Github</a>.</p>


<p style="text-align: left;">The above image shows my <a href="http://savagelook.com/blog/actionscript3/repper-my-first-flex-hero-mobile-app" target="_self">Air for Android app Repper</a> ported over to the Blackberry Playbook.  The most remarkable thing about this port? It literally took about 60 seconds to complete!  Here is the shockingly simple, comprehensive list of steps I took to accomplish this:</p>




<ol>
    <li>Create a new Flex mobile project in <a href="http://labs.adobe.com/technologies/flashbuilder_burrito/" target="_blank">Flash Builder "Burrito"</a> to <a href="http://docs.blackberry.com/en/developers/deliverables/25068/Install_the_BlackBerry_Tablet_SDK_1347129_11.jsp" target="_blank">target the Blackberry Playbook</a></li>
    <li>Copied the project files from my original Repper project to the new project</li>
    <li>Set up the <a href="http://docs.blackberry.com/en/developers/deliverables/25068/Run_app_FB45_1397696_11.jsp" target="_blank">Playbook simulator run settings</a> in my new project</li>
    <li>Clicked "Run" and voila, Repper on the Playbook!</li>
</ol>


<p style="text-align: left;">All components scaled properly.  All layouts fit to the available screen space appropriately.  All orientation transitions performed as expected.  How was this achieved without having to write a single line of device specific code?  It comes down to 3 simple things: Adobe Air, fluid layouts, and vector graphics skinning via Flex MXML.</p>




<h1><span style="font-weight: bold; font-size: 16px;">Adobe Air</span></h1>


<p style="text-align: left;">Blackberry's use of the <a href="http://us.blackberry.com/developers/tablet/adobe.jsp" target="_blank">Adobe Air SDK for its Playbook development</a> lets Flash/Air/Flex/AS3 developers leverage existing expertise and code to create apps.  The Air SDK for the Playbook also makes available QNX components to give Playbook apps a Blackberry look and feel.  You can choose from either.  This way Flex developers can use their existing paradigms and pure AS3 developers can make use of Blackberry's QNX components.  You can even use both as Renaun Erickson details in <a href="http://renaun.com/blog/2010/12/using-mxml-with-qnx-ui-components-for-the-playbook/" target="_blank">this post</a>.</p>


<p style="text-align: left;">For me the big win was taking Repper, a <a href="http://labs.adobe.com/technologies/flexsdk_hero/" target="_blank">Flex "Hero" </a> app for Android, and porting it directly, unchanged into a working Playbook app.  The Playbook Adobe Air SDK supports Flex "Hero" so everything just worked right out of the gate.  That's the kind of portability that lets an independent developer be extremely productive.</p>




<h1><span style="font-weight: bold; font-size: 16px;">Fluid Layout</span></h1>


<p style="text-align: left;">Using fluid layouts with little to no defined pixel dimensions is key to writing a multi-screen app.  Take a look at this excerpt from the main <a href="https://github.com/tonylukasavage/Repper/blob/master/src/views/RepperHome.mxml" target="_blank">RepperHome.mxml view</a>.</p>


<p>``` xml</p>

<pre><code>    &lt;s:HGroup id="landscapeGroup" includeIn="landscape" height="100%" width="100%"
          paddingTop="{this.height*0.03}" paddingBottom="{this.height*0.03}" paddingLeft="{this.height*0.03}"
          paddingRight="{this.height*0.03}" gap="{this.height*0.03}" verticalAlign="middle"&gt;
    &lt;s:SkinnableContainer id="landscapeInput" width="36%" skinClass="RepperInputSkin"&gt;
        &lt;s:layout&gt;
            &lt;s:VerticalLayout paddingTop="{this.height*0.06}" paddingLeft="{this.height*0.06}"
                              paddingRight="{this.height*0.06}" paddingBottom="{this.height*0.06}"
                              gap="{landscapeInput.height*0.04}" horizontalAlign="right"/&gt;
        &lt;/s:layout&gt;
        &lt;s:HGroup width="100%" verticalAlign="middle" gap="0"&gt;
            &lt;s:Label text="Weight" width="65%" color="0x000000" fontWeight="bold" fontSize="32"/&gt;
            &lt;s:TextInput width="35%" text="{inputWeight}" keyUp="onWeightKeyUp(event)" restrict="0-9."
                         contentBackgroundColor="0xffffff" color="0x000000"/&gt;
        &lt;/s:HGroup&gt;
        &lt;s:HGroup width="100%" verticalAlign="middle" gap="0"&gt;
            &lt;s:Label text="# of reps" width="65%" color="0x000000" fontWeight="bold" fontSize="32"/&gt;
            &lt;s:TextInput width="35%" text="{inputReps}" keyUp="onRepsKeyUp(event)" restrict="0-9"
                         contentBackgroundColor="0xffffff" color="0x000000" focusIn="textinput1_focusInHandler(event)"/&gt;
        &lt;/s:HGroup&gt;
        &lt;s:Button label="Rep It" click="recalculate();" chromeColor="#111111" /&gt;
    &lt;/s:SkinnableContainer&gt;
    &lt;local:VDataGroup width="32%" height="100%" dataProvider="{repValues1}" itemRenderer="RepperEntry"/&gt;
    &lt;local:VDataGroup width="32%" height="100%" dataProvider="{repValues2}" itemRenderer="RepperEntry"/&gt;
&lt;/s:HGroup&gt;
</code></pre>

<p>```</p>

<p style="text-align: left;">If you look at every component and container in this chunk of Flex MXML you'll notice that no defined pixel dimensions are used.  Every component's size is determined using percentages or data bindings.  I'm not going to lie, specifying dimensions in this manner will take more time and requires a bit of trial and error to get right.  It helps if you do it with the expectation that another, dissimilar device will be using this same layout in the future.  I did, and in this case the little bit of extra forethought paid off huge in terms of portability.</p>


<p>Because of design via fluid layouts, Repper appears properly in both portrait and landscape orientation on the Blackberry Playbook with no additional effort.</p>

<h1><span style="font-weight: bold; font-size: 16px;">Vector Graphics via Flex MXML Skinning</span></h1>


<p style="text-align: left;">The final factor that made Repper such a breeze to port to the Playbook was Flex Hero's ability to create vector graphics via Flex MXML.  By utilizing this capability you can create skins for your components that scale as the app scales.  No external artwork of any kind is necessary.  While this is not ideal for designers or highly stylized apps, a developer like me loves it.

Here's another excerpt from Repper.  This time it shows how I used fluid dimensions once again to create vector graphic skins for my <a href="https://github.com/tonylukasavage/Repper/blob/master/src/RepperEntry.mxml" target="_blank">RepperEntry</a> components via the <a href="https://github.com/tonylukasavage/Repper/blob/master/src/RepperEntrySkin.mxml" target="_blank">RepperEntrySkin.mxml class</a></p>


<p>``` xml</p>

<pre><code>&lt;s:Rect id="background" x="0" y="{this.height/6}" height="66%" width="100%" radiusX="10" radiusY="10"&gt;
&lt;s:filters&gt;
    &lt;s:DropShadowFilter blurX="16" blurY="16"/&gt;
&lt;/s:filters&gt;
&lt;s:stroke&gt;
    &lt;s:SolidColorStroke weight="3"/&gt;
&lt;/s:stroke&gt;
    &lt;s:fill&gt;
    &lt;s:LinearGradient rotation="-90"&gt;
        &lt;s:GradientEntry color="#bbbbbb"/&gt;
        &lt;s:GradientEntry color="#ffffff"/&gt;
        &lt;/s:LinearGradient&gt;
    &lt;/s:fill&gt;
&lt;/s:Rect&gt;
&lt;s:Rect x="0" y="{this.height/6}" height="66%" width="60%" radiusX="10" radiusY="10"&gt;
&lt;s:filters&gt;
    &lt;s:DropShadowFilter blurX="8" blurY="8" angle="0"/&gt;
&lt;/s:filters&gt;
&lt;s:stroke&gt;
    &lt;s:SolidColorStroke weight="3"/&gt;
&lt;/s:stroke&gt;
&lt;s:fill&gt;
    &lt;!--- @private --&gt;
    &lt;s:LinearGradient rotation="-90"&gt;
        &lt;s:GradientEntry color="#000000"/&gt;
        &lt;s:GradientEntry color="#444444"/&gt;
    &lt;/s:LinearGradient&gt;
    &lt;!-- &lt;s:SolidColor color="#333333"/&gt; --&gt;
&lt;/s:fill&gt;
&lt;/s:Rect&gt;
</code></pre>

<p>```</p>

<p>As you can see, percentages and binding are used to create skins for my components that are appropriately scaled regardless of the dimensions of the device.  Not having to create skin resources for each device and orientation is a tremendous time saver.  Especially for someone like myself who has no patience or talent for it.</p>

<h1><span style="font-weight: bold; font-size: 16px;">Summary</span></h1>


<p>Lesson for the day: with a little forethought and a penchant for Adobe Air, magic can happen.  OK, maybe not magic, but you'll have more time to explore the possibility of creating magic now that you won't be wasting it on porting your mobile apps.  Yes, I know, I've griped a bit lately about Flex Hero on <a href="http://twitter.com/#!/tonylukasavage" target="_blank">twitter</a>, but there are undoubtedly some things it does very well.</p>

<p>In fact, if you think about it, anyone that openly supports Adobe and their efforts to create a viable cross-platform mobile development environment has done very well with it.  I'm trying to think of who isn't supporting it?  Who's at the "core" of the issue?  I feel like day to day they are trying to keep the doctor away.  Supporting Adobe should be as appealing as American pie.  Oh well, hopefully some day they will have their thinking jolted like Isaac Newton did from a falling piece of fruit.</p>
]]></content>
  </entry>
  
</feed>
