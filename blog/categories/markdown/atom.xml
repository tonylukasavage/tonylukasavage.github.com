<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: markdown | Tony Lukasavage]]></title>
  <link href="http://tonylukasavage.github.com/blog/categories/markdown/atom.xml" rel="self"/>
  <link href="http://tonylukasavage.github.com/"/>
  <updated>2015-03-24T17:43:15-04:00</updated>
  <id>http://tonylukasavage.github.com/</id>
  <author>
    <name><![CDATA[Tony Lukasavage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gonzo, an open source markdown editor]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/07/20/gonzo--an-open-source-markdown-editor/"/>
    <updated>2011-07-20T09:34:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/07/20/gonzo--an-open-source-markdown-editor</id>
    <content type="html"><![CDATA[<h2>Gonzo</h2>




<ul>
<li><a href="https://github.com/downloads/tonylukasavage/Gonzo/Gonzo_0.1.0_alpha.air">Gonzo 0.1.0 alpha release Air installer</a></li>
<li><a href="https://github.com/tonylukasavage/Gonzo">Gonzo on Github</a></li>
</ul>




<p>Gonzo is a lightweight, open source markdown editor written for Adobe Air for desktop using Flex 4 and AS3.  Its a stripped-to-the-bone application that serves one purpose: helping you deliver well formed and easy to proofread web content.</p>




<p><img src="http://tonylukasavage.github.com/images/gonzo_final.jpg" alt="Gonzo, the lightweight markdown editor" title="" /></p>




<h2>Why use markdown, I already know HTML?</h2>




<p>Rather than drone on about the pros and cons of each, I'll just present you with a simple example. You let me know which version you would rather proofread.</p>




<h3>HTML version</h3>


<p>```</p>

<h2>Here's a header</h2>




<p>Here's some content in a paragraph. And here's a link to <a href="http://www.google.com">Google</a> and another to my <a href="https://github.com/tonylukasavage">Github</a> account.</p>




<p>And here's another paragraph
    <blockquote>this time it contains a blockquote</blockquote>
</p>




<ul>
    <li>One of these lists' syntax</li>
    <li>has the following attributes:</li>
    <li>
        <ul>
            <li><b>intrusive</b></li>
            <li><b>ugly</b></li>
            <li><b>very hard to read</b></li>
        </ul>
    </li>
    <li>which one do you think it is?</li>
</ul>


<p>```</p>

<h3>Markdown version</h3>


<p>```</p>

<h2>Here's a header</h2>

<p>Here's some content in a paragraph. And here's a link to <a href="http://www.google.com">Google</a> and another to my <a href="https://github.com/tonylukasavage">Github</a> account.</p></p>

<p>And here's another paragraph</p>

<blockquote><p>this time it contains a blockquote</p></blockquote>

<ul>
<li>One of these lists' syntax</li>
<li>has the following attributes:

<ul>
<li>intrusive</li>
<li>ugly</li>
<li>very hard to read</li>
</ul>
</li>
<li>which one do you think it is?</li>
</ul>


<p>```</p>

<h2>Why should you use Gonzo?</h2>




<p>Well, unless you are writing content for the web, you probably shouldn't.  Gonzo is written specifically for those who want to leverage the readability of markdown over HTML when publishing web content.  So whether you are writing a Wordpress blog post, editing a wiki, or even just an answering a question on <a href="http://stackoverflow.com">StackOverflow</a>, Gonzo can make your life a whole lot easier.</p>




<p>In the spirit of markdown, I've added just enough features to increase efficiency while maintaining a content-driven writing experience. The idea is to only add features necessary for making web publishing easier.  All the effort saved by not implementing useless features was redirected into usability.</p>




<h2>Just Give Me The Feature List Already</h2>




<p>Yeah, I tend to skip the text and go right for the feature list too. Kudos to anyone who actually read the previous content before coming here.</p>




<ul>
<li><strong>Live HTML preview</strong> - You can actually see the raw and rendered HTML generated by your markdown in a preview pane.</li>
<li><strong>Multi-tab editing</strong> - Edit many documents at the same time.</li>
<li><strong>Cross platform</strong> - Works on any desktop that supports Adobe Air. </li>
<li><strong>Keyboard and (context) menu shortcuts</strong> - Creating markdown is even easier now with multiple was to create it.</li>
<li><strong>HTML Export</strong> - Export your generated HTML to a file so it can easily be uploaded or shared.</li>
<li><strong>Cheat Sheet</strong> - integrated markdown cheat sheet for beginners and vets alike.</li>
</ul>




<h2>Coming soon...</h2>




<p>This is the list of features I personally would like to have, as I'm the only user so far. Please let me know what <em>you</em> think would be a good addition to Gonzo's functionality.</p>




<ul>
<li><strong>yfrog integration</strong> - Wouldn't it be nice to browse to a file on your desktop, upload it as an image, and get a markdown link placed in your document in one click?  I think so too.</li>
<li><strong>bit.ly integration</strong> - see above </li>
<li><strong>Markdown toolbar shortcuts</strong> - Just in case the keyboard, context menu, and native menu shortcuts aren't enough...</li>
<li><strong>Preferences</strong> - Let users set things like fonts, colors, editor sizes, and eventually maybe even theming. </li>
<li><strong>Local settings</strong> - For persisting preferences between Gonzo sessions</li>
</ul>




<p>What else do you have in mind?</p>




<h2>Want to Contribute?</h2>




<p>Good! Like most open source projects, ongoing development will be heavily motivated by contributions and feedback from its community of developers and users. While Gonzo will continue to grow as I use and find features I want, its going to be you who determines if it matures into an application for the masses.</p>




<p>There's a number of ways you can contribute:</p>




<ul>
<li>Use it and let me know what you think.
<ul><li>What is it missing?</li>
<li>What am I doing wrong</li>
<li>What am I doing right?</li></ul></li>
<li>Fork <a href="https://github.com/tonylukasavage/Gonzo">Gonzo on Github</a>, start hacking away, and send me some pull requests. I'm very open to help, but bear in mind that its lightweight nature and usability should not be sacrificed for the sake of features.</li>
<li>Design help is very welcome. I'm a dev through and through, so it will remain spartan in frills unless someone else decides to add the polish.</li>
</ul>




<h2>Summary</h2>




<p>There's a lot to come yet for Gonzo. I still need to get the wiki up and running for basic docs.  I may even take the time to make a web page for it if it garners enough interest. Or none of this could happen and I could just continue to use it myself. Only time and feedback will tell.</p>




<p>If you do start using or hacking Gonzo, you can let me know here, on <a href="https://github.com/tonylukasavage/Gonzo">Github</a>, or on <a href="http://twitter.com/tonylukasavage">Twitter</a>.  I'd love to hear about your experience. In the meantime I'll continue using it to write my web content and keep improving it as I see fit.</p>




<p>Oh, and this entire post was written in markdown using Gonzo.  Here's a link to the <a href="http://savagelook.com/misc/gonzo.md.text">original markdown</a> for the blog post.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking Notes on Node.js using Gonzo]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/06/22/taking-notes-on-node-js-using-gonzo/"/>
    <updated>2011-06-22T10:56:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/06/22/taking-notes-on-node-js-using-gonzo</id>
    <content type="html"><![CDATA[<h2>Gonzo</h2>

<p>In case you haven't heard me talking about it on <a href="http://twitter.com/#!/tonylukasavage">Twitter</a>, I'm creating my own markdown editor called <a href="https://github.com/tonylukasavage/Gonzo">Gonzo</a>. If you don't know what markdown is, read up on it at <a href="http://daringfireball.net/projects/markdown/syntax">John Gruber's (creator) blog</a>.  It was created as a way to make web based writing more readable from a writer's perspective.</p>

<p>Here's some of the highlights of the VERY young <strong>Gonzo</strong>:</p>

<ul style="padding-bottom:15px;">
<li>Its open source and <a href="https://github.com/tonylukasavage/Gonzo">hosted on Github</a></lI>
<li>Its written using Adobe Air for desktop, Flex 4, and AS3</lI>
<li>The markdown to HTML parsing is done using <a href="https://gist.github.com/648771">Charles Strahan's Showdown.as</a></lI>
<li>Uses <a href="http://gskinner.com/blog/archives/2007/04/free_extension.html">Grant Skinner's StringUtils.as</a></lI>
<li>Its <strong>3 days old</strong> as of the publishing date of the article</lI>
<li>It generates HTML as you type markdown and shows it live in a preview panel</lI>
<li>Counts your words for those web writers trying to hit quotas</lI>
</ul>


<h2>Test Run</h2>

<p>Last night I took <strong>Gonzo</strong> for its maiden voyage in "production." I went to a meetup of the <a href="http://www.meetup.com/Pittsburgh-JavaScript-Developers/">Pittsburgh Javascript Developers</a> and discussed <a href="http://nodejs.org/">Node.js</a>.  I've never looked at Node.js before as server side Javascript always seemed like the avenue of a one trick pony.  After shedding my preconceived notions, it became apparent that using one language throughout your entire technology stack could work miracles with your efficiency.  But its young, alpha, and it changes a lot.</p>

<p>Rather than ramble on from a beginner's stand point, I'll leave you with the notes I took last night at the meetup using <strong>Gonzo</strong>.  First, I'll show you the notes as I entered into <strong>Gonzo</strong>.  Like I said at the beginning, if markdown is unfamiliar, <a href="http://daringfireball.net/projects/markdown/syntax">read up</a>.  Just one glance shows you how much more readable and editable it is than typical HTML markup.</p>

<h2>My Notes in Markdown</h2>

<p>```</p>

<h2>Node.js</h2>

<h3>Overview</h3>

<ul>
<li>Server side JS.</li>
<li>HTTP/TCP built in</li>
<li>non-blocking, event driven, 1 thread (launches process into event queue)</li>
<li>not suitable for CPU intensive work</li>
<li>Node.js is alpha and changes a lot between revisions</li>
<li>for unix, not Windows friendly</li>
<li>everything is a callback and gets its own process

<ul>
<li>lots of nested callbacks</li>
</ul>
</li>
<li>has to run from command line, no GUI for management.</li>
<li>you can use it as a scripting language like ruby or perl

<ul>
<li>does not have to be event driven if ran this way.</li>
</ul>
</li>
<li>Having it server side allows you to use JS up and down your whole technology stack</li>
</ul>


<h3>NPM</h3>

<ul>
<li>Node package managaer</li>
<li>A lot like CPAN for perl</li>
</ul>


<h3>Modules</h3>

<ul>
<li><a href="https://github.com/joyent/node/wiki/modules">100's of modules</a></li>
<li>examples

<ul>
<li>Sizzle

<ul>
<li>DOM selections and traversing</li>
</ul>
</li>
<li>Paperboy

<ul>
<li>serves static files</li>
</ul>
</li>
<li>Jade

<ul>
<li>templating engine</li>
</ul>
</li>
<li>ExpressJS

<ul>
<li>web framework</li>
<li>use it to deliver RESTful services</li>
</ul>
</li>
<li>zombie headless browser

<ul>
<li>useful for testing Node driven services</li>
<li>assertions against returned data</li>
<li>DOM traversing is all custom code (why?!)</li>
</ul>
</li>
<li>Coffeescript</li>
<li>multiple cores w/ web workers</li>
<li>Node Inspector

<ul>
<li>debugger

<ul>
<li>breakpoints</li>
<li>call stack</li>
<li>watch expressions</li>
</ul>
</li>
<li>command line</li>
<li>runs in a webkit browser</li>
<li>based on google's v8 engine</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Basic Server</h3>

<pre><code>var http = require("http");

http.createServer(function (request, response) {
    response.writeHead("Content-Type: "text/html");
    response.write("&lt;html&gt;&lt;/html&gt;");
    response.end();
}).listen(8081);
</code></pre>

<h3>Emitters</h3>

<p>Emitters are used to counter nesting of code. Should probably use constants to define emitter names. Add parameters afer emitter name in <code>emit()</code> to pass to callback.</p>

<pre><code>emitter.emit('eventName', param1, param2);
emitter.on('eventName', function(param1, param2) {
    // do stuff
});
</code></pre>

<p>```</p>

<p>And now, through the magic of <strong>Gonzo</strong> and Showdown.as, we get to see the markdown translated into HTML.  You can then take the translated HTML and publish it to the web, allowing it to leverage any CSS and formatting your target venue has in place.  Again, notice how much more readable the markdown version is than this HTML version.</p>

<h2>My Notes Translated to HTML via Gonzo</h2>

<p>``` html</p>

<h2>Node.js</h2>




<h3>Overview</h3>




<ul>
<li>Server side JS. </li>
<li>HTTP/TCP built in</li>
<li>non-blocking, event driven, 1 thread (launches process into event queue)</li>
<li>not suitable for CPU intensive work</li>
<li>Node.js is alpha and changes a lot between revisions</li>
<li>for unix, not Windows friendly</li>
<li>everything is a callback and gets its own process
<ul><li>lots of nested callbacks</li></ul></li>
<li>has to run from command line, no GUI for management.</li>
<li>you can use it as a scripting language like ruby or perl
<ul><li>does not have to be event driven if ran this way.</li></ul></li>
<li>Having it server side allows you to use JS up and down your whole technology stack</li>
</ul>




<h3>NPM</h3>




<ul>
<li>Node package managaer</li>
<li>A lot like CPAN for perl</li>
</ul>




<h3>Modules</h3>




<ul>
<li><a href="https://github.com/joyent/node/wiki/modules">100's of modules</a></li>
<li>examples
<ul><li>Sizzle
<ul><li>DOM selections and traversing</li></ul></li>
<li>Paperboy
<ul><li>serves static files</li></ul></li>
<li>Jade
<ul><li>templating engine</li></ul></li>
<li>ExpressJS
<ul><li>web framework</li>
<li>use it to deliver RESTful services</li></ul></li>
<li>zombie headless browser
<ul><li>useful for testing Node driven services</li>
<li>assertions against returned data</li>
<li>DOM traversing is all custom code (why?!)</li></ul></li>
<li>Coffeescript</li>
<li>multiple cores w/ web workers</li>
<li>Node Inspector
<ul><li>debugger
<ul><li>breakpoints</li>
<li>call stack</li>
<li>watch expressions</li></ul></li>
<li>command line</li>
<li>runs in a webkit browser</li>
<li>based on google's v8 engine</li></ul></li></ul></li>
</ul>




<h3>Basic Server</h3>




<pre><code>var http = require("http");

http.createServer(function (request, response) {
    response.writeHead("Content-Type: "text/html");
    response.write("<html></html>");
    response.end();
}).listen(8081);
</code></pre>




<h3>Emitters</h3>




<p>Emitters are used to counter nesting of code. Should probably use constants to define emitter names. Add parameters after emitter name in <code>emit()</code> to pass to callback.</p>




<pre><code>emitter.emit('eventName', param1, param2);
emitter.on('eventName', function(param1, param2) {
    // do stuff
});
</code></pre>


<p>```</p>

<p>And finally below is the above generated HTML copied directly into my blog.  The CSS that governs my blog does its work on the elements and makes it look relatively web ready.  Obviously if I put a little more effort in (as I will soon), I can tailor the CSS to play well with my generated HTML.  For now, though, you can see the basic formatting applied.  So without cluttering your writing with HTML you can still effortlessly generate web ready content.</p>

<h2>Gonzo Generated HTML on my Blog</h2>

<h2>Node.js</h2>




<h3>Overview</h3>




<ul>
<li>Server side JS. </li>
<li>HTTP/TCP built in</li>
<li>non-blocking, event driven, 1 thread (launches process into event queue)</li>
<li>not suitable for CPU intensive work</li>
<li>Node.js is alpha and changes a lot between revisions</li>
<li>for unix, not Windows friendly</li>
<li>everything is a callback and gets its own process
<ul><li>lots of nested callbacks</li></ul></li>
<li>has to run from command line, no GUI for management.</li>
<li>you can use it as a scripting language like ruby or perl
<ul><li>does not have to be event driven if ran this way.</li></ul></li>
<li>Having it server side allows you to use JS up and down your whole technology stack</li>
</ul>




<h3>NPM</h3>




<ul>
<li>Node package managaer</li>
<li>A lot like CPAN for perl</li>
</ul>




<h3>Modules</h3>




<ul>
<li><a href="https://github.com/joyent/node/wiki/modules">100's of modules</a></li>
<li>examples
<ul><li>Sizzle
<ul><li>DOM selections and traversing</li></ul></li>
<li>Paperboy
<ul><li>serves static files</li></ul></li>
<li>Jade
<ul><li>templating engine</li></ul></li>
<li>ExpressJS
<ul><li>web framework</li>
<li>use it to deliver RESTful services</li></ul></li>
<li>zombie headless browser
<ul><li>useful for testing Node driven services</li>
<li>assertions against returned data</li>
<li>DOM traversing is all custom code (why?!)</li></ul></li>
<li>Coffeescript</li>
<li>multiple cores w/ web workers</li>
<li>Node Inspector
<ul><li>debugger
<ul><li>breakpoints</li>
<li>call stack</li>
<li>watch expressions</li></ul></li>
<li>command line</li>
<li>runs in a webkit browser</li>
<li>based on google's v8 engine</li></ul></li></ul></li>
</ul>




<h3>Basic Server</h3>




<pre><code>var http = require("http");

http.createServer(function (request, response) {
    response.writeHead("Content-Type: "text/html");
    response.write("<html></html>");
    response.end();
}).listen(8081);
</code></pre>




<h3>Emitters</h3>




<p>Emitters are used to counter nesting of code. Should probably use constants to define emitter names. Add parameters after emitter name in <code>emit()</code> to pass to callback.</p>




<pre><code>emitter.emit('eventName', param1, param2);
emitter.on('eventName', function(param1, param2) {
    // do stuff
});
</code></pre>




<div style="height:15px;"></div>


<h2>Screenshot of Gonzo in Action</h2>

<p><a href="http://tonylukasavage.github.com/images/gonzo_example.jpg"><img src="http://tonylukasavage.github.com/images/gonzo_example-e1308748863352.jpg" alt="Gonzo in action" title="Gonzo in action" width="700" height="474" class="alignnone size-full wp-image-3169" /></a></p>

<h2>Summary and TODO</h2>

<p>Right now what is shown here is basically the extent of <strong>Gonzo's</strong> functionality.  It's very young, but I plan to develop it aggressively.  After this post, all of my blog content will likely first be written in markdown in <strong>Gonzo</strong>.  I welcome contributors to the <a href="https://github.com/tonylukasavage/Gonzo">Gonzo Github repository</a>, but in all honesty, I'd wait a week or two before joining in.  Its likely to change A LOT over that period of time.</p>

<p>I'll end with the current TODO list for Gonzo.  Please feel free to add your own idea in the comments.</p>

<ul>
<li>Add ability to edit and apply CSS within Gonzo</li>
<li>More robust "project" environment to allow grouping of markdown and CSS with generated HTML</li>
<li>Spell Checker, likely via <a href="http://labs.adobe.com/technologies/squiggly/">Squiggly</a></li>
<li>Major UI polish <em>(gonna need help here)</em></li>
<li>Create Mac and Windows native downloads on the <a href="https://github.com/tonylukasavage/Gonzo">Github site</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
