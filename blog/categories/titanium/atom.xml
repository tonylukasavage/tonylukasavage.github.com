<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: titanium | Tony Lukasavage]]></title>
  <link href="http://tonylukasavage.github.com/blog/categories/titanium/atom.xml" rel="self"/>
  <link href="http://tonylukasavage.github.com/"/>
  <updated>2015-03-25T11:55:22-04:00</updated>
  <id>http://tonylukasavage.github.com/</id>
  <author>
    <name><![CDATA[Tony Lukasavage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Good-bye Appcelerator]]></title>
    <link href="http://tonylukasavage.github.com/blog/2015/03/24/good-bye-appcelerator/"/>
    <updated>2015-03-24T08:20:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2015/03/24/good-bye-appcelerator</id>
    <content type="html"><![CDATA[<p><img src="/images/codestrong.jpg" width="640" height="360" title="castaway" ></p>

<p>It's been an amazing 3.5 years, but all incredible, life-and-career-changing experiences must eventually come to an end. This week I'll be leaving my role as Senior Engineer at <a href="http://www.appcelerator.com/">Appcelerator</a> and moving on to <a href="http://innovu.com/">Innovu</a>, a new startup in my hometown of Pittsburgh.</p>

<!-- more -->


<h2>Why?</h2>

<p>Pure and simple, I have an opportunity to be the Director of Software Development at an up and coming startup run by a handful of people I've come to respect and trust over the course of over a decade. I'll be choosing the technology stack, building the team from the ground up (more on that <a href="#coming">below</a>), and having an impact on company success to a degree I never have before. It's a huge career move, it's a risk, and I'm ready for both.</p>

<p>Despite how obviously fantastic this opportunity is, I still labored over the idea of leaving Appcelerator. I'm going to miss the whole crew a lot. Ironically, without having worked with a bunch of brilliant people on ground-breaking tech for an amazing developer community in the meat grinder of Silicon Valley, I wouldn't have the confidence to take this next big step. I blame Appcelerator for my ambition!</p>

<h2>Thank you!</h2>

<p>As I've said at least a dozen times in the last week, I've taken way more from my fellow Appcelerati than I think I've given. In particular, a few people I'd really like to thank (past and present):</p>

<ul>
<li><a href="https://twitter.com/jhaynie">Jeff Haynie</a> - For giving me an amount of trust and autonomy generally reserved for family members.</li>
<li><a href="https://twitter.com/bingomar">Ingo Muschenetz</a> &amp; <a href="https://www.linkedin.com/in/neerajgupta1">Neeraj Gupta</a> - For doing the impossible: making a hip-shooting, code-slinging engineer see that process is <strong>incredible</strong> for productivity when executed properly.</li>
<li><a href="https://twitter.com/cb1kenobi">Chris Barber</a> &amp; <a href="https://twitter.com/dawsontoth">Dawson Toth</a> - My insecure overachiever complex never allows me to get comfortable unless I think I'm the best developer in the room. Chris &amp; Dawson never let me get comfortable.</li>
<li><a href="https://twitter.com/kevinwhinnery">Kevin Whinnery</a> - He's my spirit animal.</li>
<li><a href="https://twitter.com/fusion94">Tony Guntharp</a> - For taking a loud-mouthed mobile development blogger and giving him a chance to put his money where his mouth is.</li>
<li><a href="https://twitter.com/aaronksaunders">Aaron Saunders</a> &amp; <a href="https://twitter.com/fokkezb">Fokke Zandbergen</a> - The expanse of knowledge, contribution, and material these guys generated from the community over the years had most people assuming they were employees (and Fokke is now!). Thanks for setting the bar so high for the community.</li>
<li><strong>The Appcelerator Community</strong> - Maybe I should have put you men and women first. The community is why I joined Appcelerator, and it's what drove me most days. When you build SDKs, frameworks, and tooling for a living, you celebrate vicariously through your community's innovations and successes. Fortunately for the engineers at Appcelerator, we got to enjoy these frequently. Keep on kicking ass.</li>
</ul>


<p>I'm sure there's a whole bunch of people I'm forgetting to thank, so to all of you, <strong>THANK YOU!</strong></p>

<h2>What about your OSS projects?</h2>

<p>As many of you know, I've got a multitude of Appcelerator-based open source side projects. Realistically, I'm just not going to have the time to spend on many of them that they deserve. Many of these projects are regularly relied on by the community, so I don't want to see them turn to rust while others still need them. To that end, if you're interested in being made a committer/npm owner on any of the following projects, shoot me an <a href="mailto:anthony.lukasavage@gmail.com">email</a> or just ping me on <a href="https://twitter.com/tonylukasavage">twitter</a>.</p>

<ul>
<li><a href="https://github.com/tonylukasavage/grunt-titanium">grunt-titanium</a> - Grunt plugin for Titanium</li>
<li><a href="https://github.com/tonylukasavage/grunt-alloy">grunt-alloy</a> - Grunt plugin for Alloy</li>
</ul>


<h4>Thanks <a href="https://twitter.com/appcelerator">Appcelerator</a> for taking these:</h4>

<ul>
<li><a href="https://github.com/tonylukasavage/ti-mocha">ti-mocha</a> - Mocha testing ported to Titanium</li>
<li><a href="https://github.com/tonylukasavage/tiapp.xml">tiapp.xml</a> - node.js module for editing tiapp.xml files</li>
</ul>


<h4>Thanks <a href="https://twitter.com/sophrinix">Andrew McElroy</a> &amp; <a href="https://twitter.com/untward">Trevor Ward</a> for taking:</h4>

<ul>
<li><a href="https://github.com/tonylukasavage/triple">triple</a> - REPL for Titanium</li>
</ul>


<h4>Thanks <a href="https://twitter.com/_pier">Pier Paolo Ramon</a> for taking these:</h4>

<ul>
<li><a href="https://github.com/tonylukasavage/ti-commonjs">ti-commonjs</a> - node.js-style commonjs implementation for Titanium</li>
<li><a href="https://github.com/tonylukasavage/ti-fs">ti-fs</a> - node.js <code>fs</code> for Titanium</li>
<li><a href="https://github.com/tonylukasavage/ti-console">ti-console</a> - node.js <code>console</code> for Titanium</li>
<li><a href="https://github.com/tonylukasavage/vm-titanium">vm-titanium</a> - node.js <code>vm</code> for Titanium (experimental)</li>
<li><a href="https://github.com/tonylukasavage/titanium-os">titanium-os</a> - node.js <code>os</code> for Titanium</li>
</ul>


<h4>Thanks <a href="https://twitter.com/jasonkneen">Jason Kneen</a> for taking these:</h4>

<ul>
<li><a href="https://github.com/tonylukasavage/path.animator">path-animator</a> &amp; <a href="https://github.com/tonylukasavage/pathmenu.js">pathmenu.js</a> - iOS native module and Titanium code for Path-like menu</li>
</ul>


<p><a name="coming"></a></p>

<h2>Who's coming with me?</h2>

<p>Now that I'm moving on to Innovu and building a new team, I'm curious if there's anybody out there (or anyone you know) who would want to come work with me? Here's some purposely terse job descriptions. I hate overly-detailed, impossible-to-meet criteria for tech jobs.</p>

<p>Be smart. Want to learn. Play nice. Work hard. The rest is details.</p>

<ul>
<li><strong>Front-end Web Developer</strong> - Essentially I'm looking for someone hands-on with a strong background in web presentation and interaction. You should know what that encompasses for modern web development.</li>
<li><strong>Javascript Developer</strong> - I want junior devs who at the very least have a good familiarity with Javascript and want to work with both node.js and web technologies. Committment to education exceeds the need for existing chops.</li>
</ul>


<p>Python, Postgres, and AWS experience a plus for either. Like I mentioned above, shoot me an <a href="mailto:alukasavage@innovu.com">email</a> if you're interested or know someone who might be.</p>

<h2>It's not like I'm dying or anything</h2>

<p>I'll be around. You know where to <a href="https://twitter.com/tonylukasavage">find me</a>. I'll still be very active in the open source community. I'll even be likely to host the local <a href="http://www.meetup.com/Pittsburgh-JavaScript/">Pittsburgh Javascript meetup</a> at the new Innovu offices in Station Square once we get set up. It's going to be a fun time!</p>

<p>In closing, I'll just leave you with this: <em>{{profound_life_and_career_insight}}</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appcelerator API Builder Demo]]></title>
    <link href="http://tonylukasavage.github.com/blog/2014/07/21/appcelerator-api-builder-demo/"/>
    <updated>2014-07-21T15:47:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2014/07/21/appcelerator-api-builder-demo</id>
    <content type="html"><![CDATA[<p>For the last few months I've deviated from my usual <a href="http://www.appcelerator.com/platform/alloy/">Alloy</a> duties at Appcelerator. I've instead been working on an internal project with <a href="https://twitter.com/dawsontoth">Dawson Toth</a>, <a href="https://twitter.com/smurthas">Simon Murtha Smith</a>, and <a href="https://twitter.com/jhaynie">Jeff Haynie</a> (since he so quickly gets bored of being CEO). We've had a few names for it so far, but for the sake of this post I'll refer to it as <strong>API Builder</strong>.</p>

<p>In short, it bridges the gap between app and API development, taking the functional links of the <a href="http://www.appcelerator.com/platform/appcelerator-platform/">Appcelerator Platform</a> and turning them into a powerful, cohesive chain. The following screencast is a (very early) preview where I'll show you the following:</p>

<ul>
<li>Creating an API against arbitrary data source(s)</li>
<li>Publishing that API to <a href="http://docs.appcelerator.com/cloud/latest/#!/guide/node">node.acs</a></li>
<li>Creating a secure, API-specific SDK for <a href="http://www.appcelerator.com/titanium/">Titanium</a></li>
<li>Downloading and installing that SDK via <a href="http://www.appcelerator.com/platform/appcelerator-studio/">Appcelerator Studio</a></li>
<li>Using that SDK to make API calls to the published node.acs endpoints</li>
</ul>


<p>All of that done automatically, simply by defining your API in the Appcelerator 360 dashboard. Way more to come, not publicly available yet, so stay tuned.</p>

<iframe width="640" height="480" src="http://tonylukasavage.github.com//www.youtube.com/embed/6J07tU2Wejg" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Appcelerator: grunt-titanium and grunt-alloy]]></title>
    <link href="http://tonylukasavage.github.com/blog/2014/01/23/automating-appcelerator-tasks-with-grunt-titanium-and-grunt-alloy/"/>
    <updated>2014-01-23T22:04:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2014/01/23/automating-appcelerator-tasks-with-grunt-titanium-and-grunt-alloy</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/grunt.png" width="150" height="150" title="gruntjs" ></p>

<p>If you follow me on <a href="https://twitter.com/tonylukasavage">twitter</a>, my current love affair with task management via the node.js module <a href="http://gruntjs.com/">grunt</a> is no secret. Long story short, it is a deliciously simple way to automate development tasks, with a multitude of those tasks (like <a href="https://github.com/gruntjs/grunt-contrib-jshint">linting</a>, <a href="https://github.com/gruntjs/grunt-contrib-uglify">minification</a>, <a href="https://npmjs.org/package/grunt-contrib-watch">file watching</a>, etc...) already done for you. I could babble on about it here, but I think a tweet of mine best encapsulates my experience with it.<!-- more --></p>

<blockquote class="twitter-tweet" lang="en"><p>I love <a href="https://twitter.com/gruntjs">@gruntjs</a>. I now officially spend next to no time on shit that isn’t integral to the user-facing functionality of my projects.</p>&mdash; Tony Lukasavage (@tonylukasavage) <a href="https://twitter.com/tonylukasavage/statuses/414071952039772160">December 20, 2013</a></blockquote>


<script async src="http://tonylukasavage.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<br>


<p>In a natural fusion of my current technological entanglements, I took to creating grunt task plugins for <a href="http://www.appcelerator.com/titanium/">Appcelerator's</a> core cross-platform mobile development tools. As a result, we now have <a href="https://npmjs.org/package/grunt-titanium">grunt-titanium</a> for the Titanium CLI and <a href="https://npmjs.org/package/grunt-alloy">grunt-alloy</a> for the Alloy MVC framework. With these plugins you can now automate all functionality involved by these 2 tools, in turn letting you shift your focus onto your mobile app development, <strong>where it should be</strong>.</p>

<p>For a crash course in...</p>

<ul>
<li>task automation with grunt, check out their <a href="http://gruntjs.com/getting-started">docs</a>. Seriously, <span style="color:#a00;font-weight:bold;">learn grunt</span>.</li>
<li>Titanium and Alloy, check out Appcelerator's <a href="http://docs.appcelerator.com/titanium/latest/">guides</a> and get to building top-of-the-line, cross-platform, <strong>native</strong> mobile apps quickly and easily.</li>
</ul>


<p>In the meantime, though, check out these few examples of how you can use grunt-titanium and grunt-alloy to super-charge your development workflow. Bear in mind that these are excerpts from a Gruntfile.js implementation, so again, read up on grunt and check out the grunt-titanium and grunt-alloy repos to fully understand how to use these examples.</p>

<p><div class="github-widget" data-repo="tonylukasavage/grunt-titanium"></div><br></p>

<p><div class="github-widget" data-repo="tonylukasavage/grunt-alloy"></div><br></p>

<h2>Create and build a Titanium app</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// configure the plugins</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">titanium</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">should_create</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">command</span><span class="o">:</span> <span class="s1">&#39;create&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app_name&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">workspaceDir</span><span class="o">:</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">should_build</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">command</span><span class="o">:</span> <span class="s1">&#39;build&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">projectDir</span><span class="o">:</span> <span class="s1">&#39;app_name&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">buildOnly</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Actually load this plugin&#39;s task(s).</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadTasks</span><span class="p">(</span><span class="s1">&#39;tasks&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// These plugins provide necessary tasks.</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-titanium&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;titanium&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Create and compile a Alloy app</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// configure the plugins</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">titanium</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">all</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">command</span><span class="o">:</span> <span class="s1">&#39;create&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app_name&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">workspaceDir</span><span class="o">:</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">alloy</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">new_app</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">command</span><span class="o">:</span> <span class="s1">&#39;new&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">args</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;app_name&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">compile</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">command</span><span class="o">:</span> <span class="s1">&#39;compile&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">platform</span><span class="o">:</span> <span class="s1">&#39;ios&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">outputPath</span><span class="o">:</span> <span class="s1">&#39;app_name&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Actually load this plugin&#39;s task(s).</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadTasks</span><span class="p">(</span><span class="s1">&#39;tasks&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// These plugins provide necessary tasks.</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-titanium&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-alloy&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;titanium&#39;</span><span class="p">,</span> <span class="s1">&#39;alloy&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Stay tuned. I'll soon be posting about how you can expand this workflow with <a href="https://github.com/tonylukasavage/ti-mocha">ti-mocha</a> to start automating the runtime testing of your Titanium and Alloy apps!</p>

<p><strong>PS</strong> - <a href="https://github.com/gruntjs/grunt-contrib-clean">grunt-clean</a> is a great plugin to use for cleaning up after yourself when creating temporary Titanium/Alloy apps for test automation.</p>

<h2>Resources &amp; Links</h2>

<ul>
<li>grunt-titanium on <a href="https://github.com/tonylukasavage/grunt-titanium">github</a> and <a href="https://npmjs.org/package/grunt-titanium">npm</a></li>
<li>grunt-alloy on <a href="https://github.com/tonylukasavage/grunt-alloy">github</a> and <a href="https://npmjs.org/package/grunt-alloy">npm</a></li>
<li>gruntjs <a href="http://gruntjs.com/">website</a></li>
<li>Titanium SDK <a href="http://www.appcelerator.com/titanium/">website</a></li>
<li>Titanium CLI on <a href="https://npmjs.org/package/grunt-titanium">npm</a></li>
<li>Alloy <a href="http://www.appcelerator.com/titanium/alloy/">website</a> and <a href="https://npmjs.org/package/alloy">npm page</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ti-mocha: Mocha testing support for Titanium]]></title>
    <link href="http://tonylukasavage.github.com/blog/2014/01/13/ti-mocha-mocha-testing-support-for-titanium/"/>
    <updated>2014-01-13T21:12:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2014/01/13/ti-mocha-mocha-testing-support-for-titanium</id>
    <content type="html"><![CDATA[<p><div class="github-widget" data-repo="tonylukasavage/ti-mocha"></div><br></p>

<p>The Appcelerator community has long been asking for a clear choice for unit testing. While many (including myself) have used <a href="https://github.com/pivotal/jasmine">Jasmine</a>, I have over time gained preference for another. <a href="http://visionmedia.github.io/mocha/">Mocha</a> has quickly become my unit testing framework of choice for all node.js development, due to its stability, flexibility, and the consistently awesome work of its author, <a href="https://github.com/visionmedia">TJ Holowaychuk</a>. There <em>was</em> one small problem. <!-- more -->It didn't work out of the box with Titanium. And even once you got past the critical breaking issues, you still had the fact that Titanium Studio and the <a href="http://docs.appcelerator.com/titanium/latest/#!/api/Titanium.API">Titanium.API</a> log functions weren't compatible with almost any of mocha's <a href="http://visionmedia.github.io/mocha/#reporters">reporters</a>.</p>

<p><a class="fancybox.iframe" href="http://tonylukasavage.github.com/images/timocha.png" ><img src="http://tonylukasavage.github.com/images/timocha.png" style="width:50%; float:right; margin-left:10px;"></a></p>

<p>But no longer. <a href="https://github.com/tonylukasavage/ti-mocha">ti-mocha</a> resolves these issues and is ready for use in your Titanium apps. I'm not going to ramble on here, since pretty much everything is covered on the <a href="http://tonylukasavage.com/ti-mocha/">documentation website</a>, but here's the highlights:</p>

<ul>
<li>Full support for the mocha framework</li>
<li>Compatible with the <a href="https://github.com/visionmedia/should.js/">should.js</a> assertion library, which I highly recommend</li>
<li>The <code>ti-spec</code> and <code>ti-spec-studio</code> Titanium reporters, optimized for terminal and Titanium Studio, respectively</li>
<li>Detailed examples of how to use ti-mocha + should.js in your Titanium apps</li>
<li>A bunch more, so just got check it out</li>
</ul>


<p>You've got one less reason to not be unit testing your Titanium apps. So grab <a href="http://tonylukasavage.com/ti-mocha/">ti-mocha</a>, get to it, and let me know what you think.</p>

<h2>Resources &amp; Links</h2>

<ul>
<li>ti-mocha <a href="http://tonylukasavage.com/ti-mocha/">website</a> and <a href="https://github.com/tonylukasavage/ti-mocha">github</a></li>
<li>mocha <a href="http://visionmedia.github.io/mocha/">website</a> and <a href="https://github.com/visionmedia/mocha">github</a></li>
<li>jasmine <a href="https://github.com/pivotal/jasmine">github</a></li>
<li>should.js <a href="https://github.com/visionmedia/should.js/">github</a></li>
<li>Titanium <a href="http://www.appcelerator.com/titanium/">website</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automata: Conway's "Game of Life" using Appcelerator Titanium]]></title>
    <link href="http://tonylukasavage.github.com/blog/2013/07/29/automata-conways-game-of-life-using-appcelerator-titanium/"/>
    <updated>2013-07-29T11:23:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2013/07/29/automata-conways-game-of-life-using-appcelerator-titanium</id>
    <content type="html"><![CDATA[<p><a class="fancybox.iframe" href="http://tonylukasavage.github.com/images/automata.png" ><img src="http://tonylukasavage.github.com/images/automata.png" style="width:33%; float:right; margin-left:10px;"></a></p>

<p><strong>Get the source:</strong> <a href="https://github.com/tonylukasavage/Automata">Automata on Github</a></p>

<p>Every once in a while I like to engage in some wildly impractical coding experiments. You know the sort, the "Hey, I got Gentoo running on my toaster!" stuff. Today's experiement was implementing <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway's Game of Life</a> using nothing more than <a href="http://www.appcelerator.com/platform/titanium-platform/">Appcelerator Titanium</a> views and deploying it to iOS. Let me explain a bit more why this is a <span style="font-weight:bold; color:#a00;">ridiculous</span> idea...</p>

<!-- more -->


<h2>Why It's A Bad Idea</h2>

<h4><em>So</em> Not What Titanium Is Built For</h4>

<p>Titanium makes high-quality, cross-platform mobile applications leveraging native UI and functionality. It does exceptionally well with data-driven apps that make heavy use of the underlying mobile platform's own UI. It will win the app bake-off against any other cross-platform mobile framework there is, and often times native counterparts as well.</shamelessemployerpromotion></p>

<p>It is, however, <em>not</em> well-suited for any type of gaming. It is not a rendering canvas. It is not a game/particle engine. It has no standard render loop like you would expect in those aforementioned tools. Implementing any kind of graphical game-like experience is <span style="font-weight:bold; color:#a00;">ill-advised</span>. But sometimes ill can be a good thing. Just ask the Beastie Boys (RIP MCA).</p>

<p>Despite that fact, you should see what the Appcelerator-funded Lanica is doing with the <a href="http://lanica.co/products/">Platino</a>. Now <em>there's</em> a game engine. Be sure to hit up <a href="https://twitter.com/carlosicaza">Carlos Icaza</a>, former co-founder/CEO of Ansca (makers of the <a href="http://www.coronalabs.com/products/corona-sdk/">Corona SDK</a>), if you want more info about it.</p>

<p>But I digress...</p>

<h4>Titanium Has Webviews!</h4>

<p>Any normal person implementing this in Titanium would use a webview. Why? Because webviews, depending on the platform, actually have rendering facilities for these exact type of experiences. You could use an HTML5 canvas or even a WebGL surface to render this zero-person game, like I did with my experiment rendering <a href="https://github.com/tonylukasavage/jsstl">3D STL files on the web</a>, just like Github.</p>

<h2>Why It's A Good Idea</h2>

<p>Because writing code to see "what if" is what makes a <span style="font-weight:bold; color:#a00;">hacker</span> a <span style="font-weight:bold; color:#a00;">hacker</span>.</p>

<h2>Automata</h2>

<p>Here's a test run of Automata on my iPhone Simulator (6.1) using Titanium SDK 3.1.1. As you can see, as the number of live cells dwindles, the speed increases drastically, as is to be expected. Despite it's limitations, Titanium makes for a pretty cool demo of this game.</p>

<iframe src="http://player.vimeo.com/video/71266653" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>The Blood And Guts</h2>

<p>In order to implement the Game of Life with nothing more than Appcelerator Titanium <a href="http://docs.appcelerator.com/titanium/latest/#!/api/Titanium.UI.View">Views</a> I needed to do the following:</p>

<h4>Implement a crude render loop.</h4>

<p>And by crude, I mean really crude, along the lines of:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// render current generation of cells</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// calculate next generation based on current state</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This so far only plays well with iOS. The perpetual while loop seems to prevent the UI from updating on Titanium's other supported platforms. Perhaps some toying around with <code>setInterval</code> or other timing methods could alleviate this limitation.</p>

<h4>Implement The Game Of Life Algorithm</h4>

<p>I needed to execute the game in performance-conscious JavaScript. I'm sure someone can squeeze a little more performance out of this, but this section accounts for less than 1% of the actual execution time. It doesn't really seem worth the time investment to push it further.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getNextState</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">alive</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">xm1</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">xp1</span> <span class="o">=</span> <span class="nx">x</span><span class="o">+</span><span class="mi">1</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">xSize</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ym1</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">yp1</span> <span class="o">=</span> <span class="nx">y</span><span class="o">+</span><span class="mi">1</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ySize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">xm1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">ym1</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">yp1</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">xp1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">ym1</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">yp1</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">ym1</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">yp1</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// A cell&#39;s next generation is alive if:</span>
</span><span class='line'><span class="c1">// - It is currently alive and has 2-3 adjacent cells</span>
</span><span class='line'><span class="c1">// - it is current dead, but has exactly 3 neighboring cells</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="nx">alive</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">2</span> <span class="o">||</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">3</span><span class="p">))</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="nx">alive</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Handle Titanium's UI state</h4>

<p>Titanium's UI handling of each cell needed to be handled in an even more performance-conscious manner, as this is where over 99% of the execution time would eventually end up. The views are wrapped in a plain JS object in order to keep track of state and toggle the UI's dead/alive rendering as infrequently as possible. The single <code>cell.proxy.visible</code> assignment below accounts for over 99% of the total execution time on each loop. Future versions of Titanium are actually planning to make these "native bridge crossings" much faster. Automata can serve as a bar by which some of these improvements can be measured.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// render current generation</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">xSize</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ySize</span><span class="p">;</span> <span class="nx">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">cell</span> <span class="o">=</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// minimze number of times we need to modify the proxy object</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">cell</span><span class="p">.</span><span class="nx">alive</span> <span class="o">!==</span> <span class="nx">cell</span><span class="p">.</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">cell</span><span class="p">.</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="nx">cell</span><span class="p">.</span><span class="nx">alive</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// save the state</span>
</span><span class='line'>    <span class="nx">cell</span><span class="p">.</span><span class="nx">lastAlive</span> <span class="o">=</span> <span class="nx">cell</span><span class="p">.</span><span class="nx">alive</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Final Notes</h2>

<ul>
<li>Despite abusing Titanium to no end, it was still able to render the game.</li>
<li>Titanium UI proxies are where the majority of execution time is consumed. This is true of all Titanium apps. It would be interesting to see if it was possible to make tweaks to the native bridge crossing to speed this particular app up significantly. (batching updates, custom APIs via modules)</li>
<li>Changing <code>opacity</code> instead of <code>visible</code> had no discernable affect on performance.</li>
<li>Creating the live cells on-demand, rather than all cells up front, resulted in slower performance. In this particular case, the initial overhead of creating all possible cells suits the app much better.</li>
<li>I'm curious if anyone out there has any clever ideas for speeding this up. I'm all ears.</li>
</ul>


<h2>Resources &amp; Links</h2>

<ul>
<li>Source Code: <a href="https://github.com/tonylukasavage/Automata">https://github.com/tonylukasavage/Automata</a></li>
<li>Carlos Icaza presenting Lanica's Platino: <a href="http://player.vimeo.com/video/52802376">http://player.vimeo.com/video/52802376</a></li>
<li>Conway's Game of Life: <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">http://en.wikipedia.org/wiki/Conway's_Game_of_Life</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
