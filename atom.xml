<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tony Lukasavage]]></title>
  <link href="http://tonylukasavage.github.com/atom.xml" rel="self"/>
  <link href="http://tonylukasavage.github.com/"/>
  <updated>2015-03-24T15:17:30-04:00</updated>
  <id>http://tonylukasavage.github.com/</id>
  <author>
    <name><![CDATA[Tony Lukasavage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Good-bye Appcelerator]]></title>
    <link href="http://tonylukasavage.github.com/blog/2015/03/24/good-bye-appcelerator/"/>
    <updated>2015-03-24T08:20:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2015/03/24/good-bye-appcelerator</id>
    <content type="html"><![CDATA[<p><img src="http://tonylukasavage.github.com/images/codestrong.jpg" width="640" height="360" title="castaway" ></p>

<p>It&#8217;s been an amazing 3.5 years, but all incredible, life-and-career-changing experiences must eventually come to an end. This week I&#8217;ll be leaving my role as Senior Engineer at <a href="http://www.appcelerator.com/">Appcelerator</a> and moving on to <a href="http://innovu.com/">Innovu</a>, a new startup in my hometown of Pittsburgh.</p>

<!-- more -->


<h2>Why?</h2>

<p>Pure and simple, I have an opportunity to be the Director of Software Development at an up and coming startup run by a handful of people I&#8217;ve come to respect and trust over the course of over a decade. I&#8217;ll be choosing the technology stack, building the team from the ground up (more on that <a href="#coming">below</a>), and having an impact on company success to a degree I never have before. It&#8217;s a huge career move, it&#8217;s a risk, and I&#8217;m ready for both.</p>

<p>Despite how obviously fantastic this opportunity is, I still labored over the idea of leaving Appcelerator. I&#8217;m going to miss the whole crew a lot. Ironically, without having worked with a bunch of brilliant people on ground-breaking tech for an amazing developer community in the meat grinder of Silicon Valley, I wouldn&#8217;t have the confidence to take this next big step. I blame Appcelerator for my ambition!</p>

<h2>Thank you!</h2>

<p>As I&#8217;ve said at least a dozen times in the last week, I&#8217;ve taken way more from my fellow Appcelerati than I think I&#8217;ve given. In particular, a few people I&#8217;d really like to thank (past and present):</p>

<ul>
<li><a href="https://twitter.com/jhaynie">Jeff Haynie</a> - For giving me an amount of trust and autonomy generally reserved for family members.</li>
<li><a href="https://twitter.com/bingomar">Ingo Muschenetz</a> &amp; <a href="https://www.linkedin.com/in/neerajgupta1">Neeraj Gupta</a> - For doing the impossible: making a hip-shooting, code-slinging engineer see that process is <strong>incredible</strong> for productivity when executed properly.</li>
<li><a href="https://twitter.com/cb1kenobi">Chris Barber</a> &amp; <a href="https://twitter.com/dawsontoth">Dawson Toth</a> - My insecure overachiever complex never allows me to get comfortable unless I think I&#8217;m the best developer in the room. Chris &amp; Dawson never let me get comfortable.</li>
<li><a href="https://twitter.com/kevinwhinnery">Kevin Whinnery</a> - He&#8217;s my spirit animal.</li>
<li><a href="https://twitter.com/fusion94">Tony Guntharp</a> - For taking a loud-mouthed mobile development blogger and giving him a chance to put his money where his mouth is.</li>
<li><a href="https://twitter.com/aaronksaunders">Aaron Saunders</a> &amp; <a href="https://twitter.com/fokkezb">Fokke Zandbergen</a> - The expanse of knowledge, contribution, and material these guys generated from the community over the years had most people assuming they were employees (and Fokke is now!). Thanks for setting the bar so high for the community.</li>
<li><strong>The Appcelerator Community</strong> - Maybe I should have put you men and women first. The community is why I joined Appcelerator, and it&#8217;s what drove me most days. When you build SDKs, frameworks, and tooling for a living, you celebrate vicariously through your community&#8217;s innovations and successes. Fortunately for the engineers at Appcelerator, we got to enjoy these frequently. Keep on kicking ass.</li>
</ul>


<p>I&#8217;m sure there&#8217;s a whole bunch of people I&#8217;m forgetting to thank, so to all of you, <strong>THANK YOU!</strong></p>

<h2>What about your OSS projects?</h2>

<p>As many of you know, I&#8217;ve got a multitude of Appcelerator-based open source side projects. Realistically, I&#8217;m just not going to have the time to spend on many of them that they deserve. Many of these projects are regularly relied on by the community, so I don&#8217;t want to see them turn to rust while others still need them. To that end, if you&#8217;re interested in being made a committer/npm owner on any of the following projects, shoot me an <a href="mailto:anthony.lukasavage@gmail.com">email</a> or just ping me on <a href="https://twitter.com/tonylukasavage">twitter</a>.</p>

<ul>
<li><a href="https://github.com/tonylukasavage/ti-mocha">ti-mocha</a> - Mocha testing ported to Titanium</li>
<li><a href="https://github.com/tonylukasavage/triple">triple</a> - REPL for Titanium</li>
<li><a href="https://github.com/tonylukasavage/ti-commonjs">ti-commonjs</a> - node.js-style commonjs implementation for Titanium</li>
<li><a href="https://github.com/tonylukasavage/grunt-titanium">grunt-titanium</a> - Grunt plugin for Titanium</li>
<li><a href="https://github.com/tonylukasavage/grunt-alloy">grunt-alloy</a> - Grunt plugin for Alloy</li>
<li><a href="https://github.com/tonylukasavage/tiapp.xml">tiapp.xml</a> - node.js module for editing tiapp.xml files</li>
<li><a href="https://github.com/tonylukasavage/path.animator">path-animator</a> &amp; <a href="https://github.com/tonylukasavage/pathmenu.js">pathmenu.js</a> - iOS native module and Titanium code for Path-like menu</li>
<li><a href="https://github.com/tonylukasavage/ti-fs">ti-fs</a> - node.js <code>fs</code> for Titanium</li>
<li><a href="https://github.com/tonylukasavage/ti-console">ti-console</a> - node.js <code>console</code> for Titanium</li>
<li><a href="https://github.com/tonylukasavage/vm-titanium">vm-titanium</a> - node.js <code>vm</code> for Titanium (experimental)</li>
<li><a href="https://github.com/tonylukasavage/titanium-os">titanium-os</a> - node.js <code>os</code> for Titanium</li>
</ul>


<p><a name="coming"></a></p>

<h2>Who&#8217;s coming with me?</h2>

<p>Now that I&#8217;m moving on to Innovu and building a new team, I&#8217;m curious if there&#8217;s anybody out there (or anyone you know) who would want to come work with me? Here&#8217;s some purposely terse job descriptions. I hate overly-detailed, impossible-to-meet criteria for tech jobs.</p>

<p>Be smart. Want to learn. Play nice. Work hard. The rest is details.</p>

<ul>
<li><strong>Front-end Web Developer</strong> - Essentially I&#8217;m looking for someone hands-on with a strong background in web presentation and interaction. You should know what that encompasses for modern web development.</li>
<li><strong>Javascript Developer</strong> - I want junior devs who at the very least have a good familiarity with Javascript and want to work with both node.js and web technologies. Committment to education exceeds the need for existing chops.</li>
</ul>


<p>Python, Postgres, and AWS experience a plus for either. Like I mentioned above, shoot me an <a href="mailto:alukasavage@innovu.com">email</a> if you&#8217;re interested or know someone who might be.</p>

<h2>It&#8217;s not like I&#8217;m dying or anything</h2>

<p>I&#8217;ll be around. You know where to <a href="https://twitter.com/tonylukasavage">find me</a>. I&#8217;ll still be very active in the open source community. I&#8217;ll even be likely to host the local <a href="http://www.meetup.com/Pittsburgh-JavaScript/">Pittsburgh Javascript meetup</a> at the new Innovu offices in Station Square once we get set up. It&#8217;s going to be a fun time!</p>

<p>In closing, I&#8217;ll just leave you with this: <em>{{profound_life_and_career_insight}}</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Callback Spotting: Flexible APIs in Javascript]]></title>
    <link href="http://tonylukasavage.github.com/blog/2014/09/24/optional-callbacks-for-flexible-apis-in-javascript/"/>
    <updated>2014-09-24T11:53:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2014/09/24/optional-callbacks-for-flexible-apis-in-javascript</id>
    <content type="html"><![CDATA[<p>Callbacks are a necessity when developing an asynchronous API in node.js. No, really, I <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">promise</a>. To that end, here&#8217;s a little trick I originally spotted in the <a href="https://github.com/joyent/node">node.js source code</a>. When creating a function that will require a callback, but has a flexible invocation signature, I always use the <code>maybeCallback()</code> function.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// you can use lodash or underscore for this</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">isFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[object Function]&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">maybeCallback</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">isFunction</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="o">?</span> <span class="nx">callback</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Essentially, if you give it a function, it gives you the function back. Otherwise, it gives you back a new function that quietly does nothing, unless there&#8217;s an error, in which case it throws that error. Simple, right?</p>

<p>In node.js, it is a standard convention that the callback for an asynchronous function is the last argument. This is simple enough with concrete APIs, like say <a href="http://nodejs.org/api/fs.html#fs_fs_stat_path_callback">fs.stat</a>:</p>

<blockquote><p><strong>fs.stat(path, callback)</strong></p></blockquote>

<p>There&#8217;s always a <code>path</code>, and always a <code>callback</code>. No trickery needed in the API creation. But what about an API like <a href="http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback">fs.readFile</a>?</p>

<blockquote><p><strong>fs.readFile(filename, [options], callback)</strong></p></blockquote>

<p>There&#8217;s always a <code>filename</code>, there might <code>options</code>, and there should be a <code>callback</code>. So how exactly might we structure this under-the-hood? I won&#8217;t regurgitate the node.js source code here, but let&#8217;s instead see how we might use <code>maybeCallback</code> to set up this API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">readFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">callback</span> <span class="o">=</span> <span class="nx">maybeCallback</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span> <span class="o">||</span> <span class="nx">isFunction</span><span class="p">(</span><span class="nx">options</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span> <span class="cm">/* default values */</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// do stuff</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those few lines of code do the following:</p>

<ul>
<li>Use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments">arguments</a> object to find the last argument that was provided to the function.</li>
<li>Use <code>maybeCallback()</code> on the last argument to get our callback.</li>
<li>If <code>options</code> doens&#8217;t exist, or is a function (implying that it&#8217;s our callback), do your default processing of the options.</li>
</ul>


<p>This is a common pattern that I use all the time when creating APIs. And giving the users of your modules this flexibility is often key to not just their success, but also their delight in using your code. More users, more feedback, more pull requests, better module. You know how it goes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appcelerator API Builder Demo]]></title>
    <link href="http://tonylukasavage.github.com/blog/2014/07/21/appcelerator-api-builder-demo/"/>
    <updated>2014-07-21T15:47:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2014/07/21/appcelerator-api-builder-demo</id>
    <content type="html"><![CDATA[<p>For the last few months I&#8217;ve deviated from my usual <a href="http://www.appcelerator.com/platform/alloy/">Alloy</a> duties at Appcelerator. I&#8217;ve instead been working on an internal project with <a href="https://twitter.com/dawsontoth">Dawson Toth</a>, <a href="https://twitter.com/smurthas">Simon Murtha Smith</a>, and <a href="https://twitter.com/jhaynie">Jeff Haynie</a> (since he so quickly gets bored of being CEO). We&#8217;ve had a few names for it so far, but for the sake of this post I&#8217;ll refer to it as <strong>API Builder</strong>.</p>

<p>In short, it bridges the gap between app and API development, taking the functional links of the <a href="http://www.appcelerator.com/platform/appcelerator-platform/">Appcelerator Platform</a> and turning them into a powerful, cohesive chain. The following screencast is a (very early) preview where I&#8217;ll show you the following:</p>

<ul>
<li>Creating an API against arbitrary data source(s)</li>
<li>Publishing that API to <a href="http://docs.appcelerator.com/cloud/latest/#!/guide/node">node.acs</a></li>
<li>Creating a secure, API-specific SDK for <a href="http://www.appcelerator.com/titanium/">Titanium</a></li>
<li>Downloading and installing that SDK via <a href="http://www.appcelerator.com/platform/appcelerator-studio/">Appcelerator Studio</a></li>
<li>Using that SDK to make API calls to the published node.acs endpoints</li>
</ul>


<p>All of that done automatically, simply by defining your API in the Appcelerator 360 dashboard. Way more to come, not publicly available yet, so stay tuned.</p>

<iframe width="640" height="480" src="http://tonylukasavage.github.com//www.youtube.com/embed/6J07tU2Wejg" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom assertions in should.js]]></title>
    <link href="http://tonylukasavage.github.com/blog/2014/05/29/custom-assertions-in-should-dot-js/"/>
    <updated>2014-05-29T14:47:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2014/05/29/custom-assertions-in-should-dot-js</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/visionmedia/should.js">should.js</a> is my assertion library of choice when unit testing my <a href="http://nodejs.org/">node.js</a> and <a href="http://www.appcelerator.com/titanium/">Titanium</a> projects, for a few reasons:</p>

<ol>
<li>Works flawlessly with <a href="http://visionmedia.github.io/mocha/">mocha</a>. Not a surprise since they have the same <a href="https://github.com/visionmedia">author</a>.</li>
<li>Works in node.js, browser, and Titanium.</li>
<li>Extremely readable and <span class="readme">expressive</span>.</li>
<li>Extendable to be even better at #3, if you know how.</li>
</ol>


<!-- more -->


<p>Here I&#8217;d like to explain exactly how you can do #4. I was originally inspired by <a href="http://beyondoverload.wordpress.com/2012/01/19/custom-assertions-with-should-js/">this post</a>, but the method therein made available only a small subset of should.js&#8217;s assertion functionality. To quote Freddy Mercury, <strong><em>♫ I want it all, and I want it now. ♫</em></strong></p>

<h2>Test Case</h2>

<p>Let&#8217;s say you have a configuration file that must abide by this format:</p>

<h3>config.json</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;string value&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;value&quot;</span><span class="o">:</span> <span class="mi">1234</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;isSomething&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;d like to strictly enforce that format using assertions. Lots of them. A ridiculous amount in fact. Yes, it could be done much more tersely, but it helps express the point of customization. Let&#8217;s do it in a mocha <a href="http://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a> structure.</p>

<h2>No Custom Assertions</h2>

<h3>test.js</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mocha</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mocha&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be valid&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// assuming getConfigToTest() returns the object to be tested...</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">getConfigToTest</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">should</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">config</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">an</span><span class="p">.</span><span class="nb">Object</span><span class="p">;</span>
</span><span class='line'>      <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}).</span><span class="nx">should</span><span class="p">.</span><span class="nx">not</span><span class="p">.</span><span class="k">throw</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">should</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">config</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nb">String</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">should</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">config</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nb">Number</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">should</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">isSomething</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">config</span><span class="p">.</span><span class="nx">isSomething</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nb">Boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&#8217;re effectively asserting the format of the configuration, but we&#8217;re losing a bit of the expressiveness of should.js in the process. We&#8217;ve essentially got 11 lines of assertion code when what we really just want to say is</p>

<blockquote><p>this object should be a valid config</p></blockquote>

<p>In addition, what if we want to validate the config at the beginning of many tests and keep it <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>? It&#8217;s undoubtedly getting messy fast here.</p>

<h2>Custom Assertions</h2>

<p>Let&#8217;s say &#8220;this object is a valid config&#8221; <em>exactly</em> by creating a <span class="readme">custom assertion</span> within should.js. And let&#8217;s go one step further and show how this custom assertion can be placed in a separate module. This will make our tests as simple, clean, and expressive as possible.</p>

<p>I&#8217;m going to explain some of the should.js assertion internals inline, but for more details I&#8217;d highly suggest perusing the <a href="https://github.com/visionmedia/should.js">source code</a>, particularly the <a href="https://github.com/visionmedia/should.js/tree/master/lib/ext">extensions</a>.</p>

<h3>assertions.js</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">should</span><span class="p">.</span><span class="nx">Assertion</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span>
</span><span class='line'>  <span class="c1">// the name of the custom assertion</span>
</span><span class='line'>  <span class="s1">&#39;ValidConfig&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the implementation of the custom assertion</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// `this.params` defines what text is associated with the</span>
</span><span class='line'>      <span class="c1">// pass/fail state of your custom assertion</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">params</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">operator</span><span class="o">:</span> <span class="s1">&#39;to be a valid config&#39;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// `this.obj` refers to the object in the should.js chain upon</span>
</span><span class='line'>      <span class="c1">// which the assertion will be applied. `foo` would be `this.obj`</span>
</span><span class='line'>      <span class="c1">// in this example:</span>
</span><span class='line'>      <span class="c1">//</span>
</span><span class='line'>      <span class="c1">//     foo.should.be.a.String;</span>
</span><span class='line'>      <span class="c1">//</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// the assertion itself, just as above</span>
</span><span class='line'>      <span class="nx">should</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">config</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">an</span><span class="p">.</span><span class="nb">Object</span><span class="p">;</span>
</span><span class='line'>      <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}).</span><span class="nx">should</span><span class="p">.</span><span class="nx">not</span><span class="p">.</span><span class="k">throw</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">should</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">config</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nb">String</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">should</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">config</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nb">Number</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">should</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">isSomething</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">config</span><span class="p">.</span><span class="nx">isSomething</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nb">Boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// is this a getter, meaning no function call?</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">//     foo.should.be.a.String         // getter</span>
</span><span class='line'>  <span class="c1">//     foo.should.be.equal(&#39;string&#39;); // not a getter</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="kc">true</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>and now are unit test looks like this:</p>

<h3>test.js</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assertions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./assertions&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">mocha</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mocha&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be valid&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">getConfigToTest</span><span class="p">().</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">ValidConfig</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aaaaaahhh, now that is <em><span class="readme">nice</span></em>. It should be pretty clear at this point how custom assertions can improve the readability and scalability of your test suites. It becomes clearer as your test suites grow.</p>

<h2>Examples</h2>

<p>Just in case you aren&#8217;t convinced, here&#8217;s a few more examples of using custom assertions in should.js to execute critical testing while preserving maximal expressiveness.</p>

<h3>Titanium Proxies</h3>

<p>Remember, <a href="http://tonylukasavage.com/ti-mocha/#caveats">Titanium proxies don&#8217;t play well with should.js</a>, so you need to wrap them manually before running assertions.</p>

<h4>assertions.js</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">should</span><span class="p">.</span><span class="nx">Assertion</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;TitaniumProxy&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">params</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">operator</span><span class="o">:</span> <span class="s1">&#39;to be a Titanium proxy&#39;</span> <span class="p">};</span>
</span><span class='line'>  <span class="nx">should</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">obj</span><span class="p">).</span><span class="nx">be</span><span class="p">.</span><span class="nx">an</span><span class="p">.</span><span class="nb">Object</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">should</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">obj</span><span class="p">.</span><span class="nx">applyProperties</span><span class="p">).</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nb">Function</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>usage</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assertions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./assertions&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">win</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createWindow</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">should</span><span class="p">(</span><span class="nx">win</span><span class="p">).</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">TitaniumProxy</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Format Validation</h3>

<p>Here&#8217;s a simple case of validating that a given object is an XML string using <a href="https://github.com/jindw/xmldom">xmldom</a>.</p>

<h4>assertions.js</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">DOMParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;xmldom&#39;</span><span class="p">).</span><span class="nx">DOMParser</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">should</span><span class="p">.</span><span class="nx">Assertion</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;Xml&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">params</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">operator</span><span class="o">:</span> <span class="s1">&#39;to be a valid XML string&#39;</span> <span class="p">};</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">obj</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nb">String</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">DOMParser</span><span class="p">().</span><span class="nx">parseFromString</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">should</span><span class="p">.</span><span class="nx">not</span><span class="p">.</span><span class="k">throw</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>usage</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assertions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./assertions&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">xml</span> <span class="o">=</span> <span class="s1">&#39;&lt;root&gt;&lt;node/&gt;&lt;/root&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">xml</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">XML</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Complex matchers</h3>

<p>You can even do some really complex validating using functions instead of getters. Here&#8217;s an example of asserting that a chunk of Javascript will be be minified into an expected string using <a href="https://github.com/mishoo/UglifyJS2">uglifyjs</a>.</p>

<h4>assertions.js</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">UglifyJS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;uglify-js&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">should</span><span class="p">.</span><span class="nx">Assertion</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;minifyTo&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">params</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">operator</span><span class="o">:</span> <span class="s1">&#39;to minify to `&#39;</span> <span class="o">+</span> <span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;`&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">expected</span><span class="o">:</span> <span class="nx">str</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">showDiff</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">obj</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nb">String</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">UglifyJS</span><span class="p">.</span><span class="nx">minify</span><span class="p">(</span><span class="s1">&#39;test.js&#39;</span><span class="p">).</span><span class="nx">code</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">result</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">should</span><span class="p">.</span><span class="nx">not</span><span class="p">.</span><span class="k">throw</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>usage</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assertions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./assertions&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">code</span> <span class="o">=</span> <span class="s1">&#39;var  foo = &quot;bar&quot;; var quux = 123;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">code</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">minifyTo</span><span class="p">(</span><span class="s1">&#39;var foo=&quot;bar&quot;,quux=123;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resources &amp; Links</h2>

<ul>
<li>should.js on <a href="https://github.com/visionmedia/should.js">github</a> and lots of assertion <a href="https://github.com/visionmedia/should.js/tree/master/lib/ext">examples</a></li>
<li>mocha <a href="http://visionmedia.github.io/mocha/">website</a> and <a href="https://github.com/visionmedia/mocha">github</a></li>
<li><a href="http://beyondoverload.wordpress.com/2012/01/19/custom-assertions-with-should-js/">&#8220;Custom assertions with should.js&#8221;</a> by Andrew Swerlick</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F*ck You, Show Me]]></title>
    <link href="http://tonylukasavage.github.com/blog/2014/01/24/f-ck-you/"/>
    <updated>2014-01-24T10:48:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2014/01/24/f-ck-you</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://1.bp.blogspot.com/_518ml9CpccA/S1yBZEPKawI/AAAAAAAACwI/wne0NNFcUOE/s400/castaway.jpg" width="250" height="250" title="castaway" ></p>

<p>Resolving bug reports is like trying to rescue developers lost on a desert island. Sometimes you get the privilege of rescuing the developer who started a signal fire you couldn&#8217;t possible miss, kindled by reproducible test cases and detailed specifics of their environment. They make the rescue easy and still thank you profusely for the aid. In the end, everyone involved is happy. But this isn&#8217;t always the case&#8230;<!-- more --></p>

<p>Sometimes you have to resuce the developer who makes no effort on their own to get off the island. They&#8217;re just sitting in the sand, arms folded, pissed off at the world for getting marooned. This developer essentially throws a message in a bottle into the sea, the entire contents reading:</p>

<blockquote><p>I&#8217;m lost. Find me.</p></blockquote>

<p>When the maintainer of the &#8220;offending&#8221; software project actually manages to find the message, they often tweet cynical things like this:</p>

<blockquote class="twitter-tweet" lang="en"><p>“It failed” or “there was an error” is not a bug report</p>&mdash; Tony Lukasavage (@tonylukasavage) <a href="https://twitter.com/tonylukasavage/statuses/426714081102675968">January 24, 2014</a></blockquote>


<script async src="http://tonylukasavage.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>And while there is a minute, fleeting catharsis to complaining into the void of twitter, nothing is achieved. The stranded developer is still stuck. The maintainer&#8217;s project has not improved and they still need to wonder if the poorly-defined report is legitimate.</p>

<p>It is at this point that I paraphrase the immortal wisdom of Henry Hill, as delivered through the genius of Martin Scorcese&#8217;s &#8220;Goodfellas&#8221;:</p>

<blockquote><p>Fuck you, show me.</p></blockquote>

<iframe width="640" height="360" src="http://www.youtube.com/embed/5ydqjqZ_3oc?rel=0&start=0&end=22&autoplay=0" frameborder="0" allowfullscreen></iframe>


<p>Trouble with the framework?</p>

<blockquote><p>Fuck you, show me.</p></blockquote>

<p>An uncaught exception crashed your app?</p>

<blockquote><p>Fuck you, show me.</p></blockquote>

<p>You&#8217;re stuck on what you think is a bug and your client is expecting a deliverable ASAP?</p>

<blockquote><p>Fuck you, show me.</p></blockquote>

<p>Am I really this callous with the bug-reporting-challenged? No, not even close. I want to harbor a notion of inclusivity and even education on this task that is the lifeblood of an open source project. So maybe that&#8217;s not <em>exactly</em> how you should phrase it. Perhaps in practice it sounds a little more like:</p>

<blockquote><p>You haven&#8217;t provided enough information for anyone to help you troubleshoot. Please provide the details of your development environment, as well as a reproducible test case that manifests the bug you are reporting, and an explanation of what the expected behavior is if it&#8217;s not clear.</p></blockquote>

<p>But the sentiment is the same. And without the aforementioned requirements, I <span style="color:#a00; font-weight:bold;">will not assist</span> with the bug. Why the hard line on bug reporting? Because standing firm on this point is best for everyone.</p>

<ul>
<li>The reporter, in the end, will get their problem solved faster. Providing sufficient details also assures that the issue doesn&#8217;t get pushed into the maintainer&#8217;s &#8220;archive&#8221;; an archive that is sometimes never revisited.</li>
<li>The maintainer gets a bug resolved without having to employ mind-reading, which is reward enough in itself. In addition, well-written bug reports make it much easier for maintainers to write tests that will prevent regressions in the future, thereby increasing the stability of the project.</li>
<li>The project&#8217;s community of developers wins too. Well written bug reports allow the maintainer(s) to move through bugs quickly and spend more time focusing on improvements and features.</li>
</ul>


<p>Don&#8217;t get stuck on a desert island only to get blown off by a gangster-quoting maintainer. Write minimal, detailed, reproducible bug reports.</p>

<p><em>Feel free to link the shit out of this on issue lists, Q&amp;A boards, forums, etc&#8230; <span style="color:#a00; font-weight:bold;">Spread the word</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Appcelerator: grunt-titanium and grunt-alloy]]></title>
    <link href="http://tonylukasavage.github.com/blog/2014/01/23/automating-appcelerator-tasks-with-grunt-titanium-and-grunt-alloy/"/>
    <updated>2014-01-23T22:04:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2014/01/23/automating-appcelerator-tasks-with-grunt-titanium-and-grunt-alloy</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://tonylukasavage.github.com/images/grunt.png" width="150" height="150" title="gruntjs" ></p>

<p>If you follow me on <a href="https://twitter.com/tonylukasavage">twitter</a>, my current love affair with task management via the node.js module <a href="http://gruntjs.com/">grunt</a> is no secret. Long story short, it is a deliciously simple way to automate development tasks, with a multitude of those tasks (like <a href="https://github.com/gruntjs/grunt-contrib-jshint">linting</a>, <a href="https://github.com/gruntjs/grunt-contrib-uglify">minification</a>, <a href="https://npmjs.org/package/grunt-contrib-watch">file watching</a>, etc&#8230;) already done for you. I could babble on about it here, but I think a tweet of mine best encapsulates my experience with it.<!-- more --></p>

<blockquote class="twitter-tweet" lang="en"><p>I love <a href="https://twitter.com/gruntjs">@gruntjs</a>. I now officially spend next to no time on shit that isn’t integral to the user-facing functionality of my projects.</p>&mdash; Tony Lukasavage (@tonylukasavage) <a href="https://twitter.com/tonylukasavage/statuses/414071952039772160">December 20, 2013</a></blockquote>


<script async src="http://tonylukasavage.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<br>


<p>In a natural fusion of my current technological entanglements, I took to creating grunt task plugins for <a href="http://www.appcelerator.com/titanium/">Appcelerator&#8217;s</a> core cross-platform mobile development tools. As a result, we now have <a href="https://npmjs.org/package/grunt-titanium">grunt-titanium</a> for the Titanium CLI and <a href="https://npmjs.org/package/grunt-alloy">grunt-alloy</a> for the Alloy MVC framework. With these plugins you can now automate all functionality involved by these 2 tools, in turn letting you shift your focus onto your mobile app development, <strong>where it should be</strong>.</p>

<p>For a crash course in&#8230;</p>

<ul>
<li>task automation with grunt, check out their <a href="http://gruntjs.com/getting-started">docs</a>. Seriously, <span style="color:#a00;font-weight:bold;">learn grunt</span>.</li>
<li>Titanium and Alloy, check out Appcelerator&#8217;s <a href="http://docs.appcelerator.com/titanium/latest/">guides</a> and get to building top-of-the-line, cross-platform, <strong>native</strong> mobile apps quickly and easily.</li>
</ul>


<p>In the meantime, though, check out these few examples of how you can use grunt-titanium and grunt-alloy to super-charge your development workflow. Bear in mind that these are excerpts from a Gruntfile.js implementation, so again, read up on grunt and check out the grunt-titanium and grunt-alloy repos to fully understand how to use these examples.</p>

<div class="github-widget" data-repo="tonylukasavage/grunt-titanium"></div>


<br>




<div class="github-widget" data-repo="tonylukasavage/grunt-alloy"></div>


<br>


<h2>Create and build a Titanium app</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// configure the plugins</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">titanium</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">should_create</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">command</span><span class="o">:</span> <span class="s1">&#39;create&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app_name&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">workspaceDir</span><span class="o">:</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="nx">should_build</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">command</span><span class="o">:</span> <span class="s1">&#39;build&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">projectDir</span><span class="o">:</span> <span class="s1">&#39;app_name&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">buildOnly</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Actually load this plugin&#39;s task(s).</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadTasks</span><span class="p">(</span><span class="s1">&#39;tasks&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// These plugins provide necessary tasks.</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-titanium&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;titanium&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create and compile a Alloy app</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// configure the plugins</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">titanium</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">all</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">command</span><span class="o">:</span> <span class="s1">&#39;create&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app_name&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">workspaceDir</span><span class="o">:</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">alloy</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">new_app</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">command</span><span class="o">:</span> <span class="s1">&#39;new&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">args</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;app_name&#39;</span><span class="p">]</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="nx">compile</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">command</span><span class="o">:</span> <span class="s1">&#39;compile&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">platform</span><span class="o">:</span> <span class="s1">&#39;ios&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">outputPath</span><span class="o">:</span> <span class="s1">&#39;app_name&#39;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Actually load this plugin&#39;s task(s).</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadTasks</span><span class="p">(</span><span class="s1">&#39;tasks&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// These plugins provide necessary tasks.</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-titanium&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-alloy&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;titanium&#39;</span><span class="p">,</span> <span class="s1">&#39;alloy&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Stay tuned. I&#8217;ll soon be posting about how you can expand this workflow with <a href="https://github.com/tonylukasavage/ti-mocha">ti-mocha</a> to start automating the runtime testing of your Titanium and Alloy apps!</p>

<p><strong>PS</strong> - <a href="https://github.com/gruntjs/grunt-contrib-clean">grunt-clean</a> is a great plugin to use for cleaning up after yourself when creating temporary Titanium/Alloy apps for test automation.</p>

<h2>Resources &amp; Links</h2>

<ul>
<li>grunt-titanium on <a href="https://github.com/tonylukasavage/grunt-titanium">github</a> and <a href="https://npmjs.org/package/grunt-titanium">npm</a></li>
<li>grunt-alloy on <a href="https://github.com/tonylukasavage/grunt-alloy">github</a> and <a href="https://npmjs.org/package/grunt-alloy">npm</a></li>
<li>gruntjs <a href="http://gruntjs.com/">website</a></li>
<li>Titanium SDK <a href="http://www.appcelerator.com/titanium/">website</a></li>
<li>Titanium CLI on <a href="https://npmjs.org/package/grunt-titanium">npm</a></li>
<li>Alloy <a href="http://www.appcelerator.com/titanium/alloy/">website</a> and <a href="https://npmjs.org/package/alloy">npm page</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ti-mocha: Mocha testing support for Titanium]]></title>
    <link href="http://tonylukasavage.github.com/blog/2014/01/13/ti-mocha-mocha-testing-support-for-titanium/"/>
    <updated>2014-01-13T21:12:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2014/01/13/ti-mocha-mocha-testing-support-for-titanium</id>
    <content type="html"><![CDATA[<div class="github-widget" data-repo="tonylukasavage/ti-mocha"></div>


<br>


<p>The Appcelerator community has long been asking for a clear choice for unit testing. While many (including myself) have used <a href="https://github.com/pivotal/jasmine">Jasmine</a>, I have over time gained preference for another. <a href="http://visionmedia.github.io/mocha/">Mocha</a> has quickly become my unit testing framework of choice for all node.js development, due to its stability, flexibility, and the consistently awesome work of its author, <a href="https://github.com/visionmedia">TJ Holowaychuk</a>. There <em>was</em> one small problem. <!-- more -->It didn&#8217;t work out of the box with Titanium. And even once you got past the critical breaking issues, you still had the fact that Titanium Studio and the <a href="http://docs.appcelerator.com/titanium/latest/#!/api/Titanium.API">Titanium.API</a> log functions weren&#8217;t compatible with almost any of mocha&#8217;s <a href="http://visionmedia.github.io/mocha/#reporters">reporters</a>.</p>

<p><a class="fancybox.iframe" href="http://tonylukasavage.github.com/images/timocha.png" ><img src="http://tonylukasavage.github.com/images/timocha.png" style="width:50%; float:right; margin-left:10px;"></a></p>

<p>But no longer. <a href="https://github.com/tonylukasavage/ti-mocha">ti-mocha</a> resolves these issues and is ready for use in your Titanium apps. I&#8217;m not going to ramble on here, since pretty much everything is covered on the <a href="http://tonylukasavage.com/ti-mocha/">documentation website</a>, but here&#8217;s the highlights:</p>

<ul>
<li>Full support for the mocha framework</li>
<li>Compatible with the <a href="https://github.com/visionmedia/should.js/">should.js</a> assertion library, which I highly recommend</li>
<li>The <code>ti-spec</code> and <code>ti-spec-studio</code> Titanium reporters, optimized for terminal and Titanium Studio, respectively</li>
<li>Detailed examples of how to use ti-mocha + should.js in your Titanium apps</li>
<li>A bunch more, so just got check it out</li>
</ul>


<p>You&#8217;ve got one less reason to not be unit testing your Titanium apps. So grab <a href="http://tonylukasavage.com/ti-mocha/">ti-mocha</a>, get to it, and let me know what you think.</p>

<h2>Resources &amp; Links</h2>

<ul>
<li>ti-mocha <a href="http://tonylukasavage.com/ti-mocha/">website</a> and <a href="https://github.com/tonylukasavage/ti-mocha">github</a></li>
<li>mocha <a href="http://visionmedia.github.io/mocha/">website</a> and <a href="https://github.com/visionmedia/mocha">github</a></li>
<li>jasmine <a href="https://github.com/pivotal/jasmine">github</a></li>
<li>should.js <a href="https://github.com/visionmedia/should.js/">github</a></li>
<li>Titanium <a href="http://www.appcelerator.com/titanium/">website</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automata: Conway's "Game of Life" using Appcelerator Titanium]]></title>
    <link href="http://tonylukasavage.github.com/blog/2013/07/29/automata-conways-game-of-life-using-appcelerator-titanium/"/>
    <updated>2013-07-29T11:23:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2013/07/29/automata-conways-game-of-life-using-appcelerator-titanium</id>
    <content type="html"><![CDATA[<p><a class="fancybox.iframe" href="http://tonylukasavage.github.com/images/automata.png" ><img src="http://tonylukasavage.github.com/images/automata.png" style="width:33%; float:right; margin-left:10px;"></a></p>

<p><strong>Get the source:</strong> <a href="https://github.com/tonylukasavage/Automata">Automata on Github</a></p>

<p>Every once in a while I like to engage in some wildly impractical coding experiments. You know the sort, the &#8220;Hey, I got Gentoo running on my toaster!&#8221; stuff. Today&#8217;s experiement was implementing <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway&#8217;s Game of Life</a> using nothing more than <a href="http://www.appcelerator.com/platform/titanium-platform/">Appcelerator Titanium</a> views and deploying it to iOS. Let me explain a bit more why this is a <span style="font-weight:bold; color:#a00;">ridiculous</span> idea&#8230;</p>

<!-- more -->


<h2>Why It&#8217;s A Bad Idea</h2>

<h4><em>So</em> Not What Titanium Is Built For</h4>

<p>Titanium makes high-quality, cross-platform mobile applications leveraging native UI and functionality. It does exceptionally well with data-driven apps that make heavy use of the underlying mobile platform&#8217;s own UI. It will win the app bake-off against any other cross-platform mobile framework there is, and often times native counterparts as well.</shamelessemployerpromotion></p>

<p>It is, however, <em>not</em> well-suited for any type of gaming. It is not a rendering canvas. It is not a game/particle engine. It has no standard render loop like you would expect in those aforementioned tools. Implementing any kind of graphical game-like experience is <span style="font-weight:bold; color:#a00;">ill-advised</span>. But sometimes ill can be a good thing. Just ask the Beastie Boys (RIP MCA).</p>

<p>Despite that fact, you should see what the Appcelerator-funded Lanica is doing with the <a href="http://lanica.co/products/">Platino</a>. Now <em>there&#8217;s</em> a game engine. Be sure to hit up <a href="https://twitter.com/carlosicaza">Carlos Icaza</a>, former co-founder/CEO of Ansca (makers of the <a href="http://www.coronalabs.com/products/corona-sdk/">Corona SDK</a>), if you want more info about it.</p>

<p>But I digress&#8230;</p>

<h4>Titanium Has Webviews!</h4>

<p>Any normal person implementing this in Titanium would use a webview. Why? Because webviews, depending on the platform, actually have rendering facilities for these exact type of experiences. You could use an HTML5 canvas or even a WebGL surface to render this zero-person game, like I did with my experiment rendering <a href="https://github.com/tonylukasavage/jsstl">3D STL files on the web</a>, just like Github.</p>

<h2>Why It&#8217;s A Good Idea</h2>

<p>Because writing code to see &#8220;what if&#8221; is what makes a <span style="font-weight:bold; color:#a00;">hacker</span> a <span style="font-weight:bold; color:#a00;">hacker</span>.</p>

<h2>Automata</h2>

<p>Here&#8217;s a test run of Automata on my iPhone Simulator (6.1) using Titanium SDK 3.1.1. As you can see, as the number of live cells dwindles, the speed increases drastically, as is to be expected. Despite it&#8217;s limitations, Titanium makes for a pretty cool demo of this game.</p>

<iframe src="http://player.vimeo.com/video/71266653" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>The Blood And Guts</h2>

<p>In order to implement the Game of Life with nothing more than Appcelerator Titanium <a href="http://docs.appcelerator.com/titanium/latest/#!/api/Titanium.UI.View">Views</a> I needed to do the following:</p>

<h4>Implement a crude render loop.</h4>

<p>And by crude, I mean really crude, along the lines of:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// render current generation of cells</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// calculate next generation based on current state</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This so far only plays well with iOS. The perpetual while loop seems to prevent the UI from updating on Titanium&#8217;s other supported platforms. Perhaps some toying around with <code>setInterval</code> or other timing methods could alleviate this limitation.</p>

<h4>Implement The Game Of Life Algorithm</h4>

<p>I needed to execute the game in performance-conscious JavaScript. I&#8217;m sure someone can squeeze a little more performance out of this, but this section accounts for less than 1% of the actual execution time. It doesn&#8217;t really seem worth the time investment to push it further.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getNextState</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">alive</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">xm1</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">xp1</span> <span class="o">=</span> <span class="nx">x</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="nx">xSize</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">ym1</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">yp1</span> <span class="o">=</span> <span class="nx">y</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="nx">ySize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">xm1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">ym1</span> <span class="o">&amp;&amp;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">yp1</span> <span class="o">&amp;&amp;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">xp1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">ym1</span> <span class="o">&amp;&amp;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">yp1</span> <span class="o">&amp;&amp;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">ym1</span> <span class="o">&amp;&amp;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">yp1</span> <span class="o">&amp;&amp;</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// A cell&#39;s next generation is alive if:</span>
</span><span class='line'>  <span class="c1">// - It is currently alive and has 2-3 adjacent cells</span>
</span><span class='line'>  <span class="c1">// - it is current dead, but has exactly 3 neighboring cells</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="nx">alive</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">2</span> <span class="o">||</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">3</span><span class="p">))</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="nx">alive</span> <span class="o">&amp;&amp;</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Handle Titanium&#8217;s UI state</h4>

<p>Titanium&#8217;s UI handling of each cell needed to be handled in an even more performance-conscious manner, as this is where over 99% of the execution time would eventually end up. The views are wrapped in a plain JS object in order to keep track of state and toggle the UI&#8217;s dead/alive rendering as infrequently as possible. The single <code>cell.proxy.visible</code> assignment below accounts for over 99% of the total execution time on each loop. Future versions of Titanium are actually planning to make these &#8220;native bridge crossings&#8221; much faster. Automata can serve as a bar by which some of these improvements can be measured.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// render current generation</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">xSize</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="nx">ySize</span><span class="p">;</span> <span class="nx">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">cell</span> <span class="o">=</span> <span class="nx">cells</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// minimze number of times we need to modify the proxy object</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">cell</span><span class="p">.</span><span class="nx">alive</span> <span class="o">!==</span> <span class="nx">cell</span><span class="p">.</span><span class="nx">lastAlive</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">cell</span><span class="p">.</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="nx">cell</span><span class="p">.</span><span class="nx">alive</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// save the state</span>
</span><span class='line'>      <span class="nx">cell</span><span class="p">.</span><span class="nx">lastAlive</span> <span class="o">=</span> <span class="nx">cell</span><span class="p">.</span><span class="nx">alive</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Final Notes</h2>

<ul>
<li>Despite abusing Titanium to no end, it was still able to render the game.</li>
<li>Titanium UI proxies are where the majority of execution time is consumed. This is true of all Titanium apps. It would be interesting to see if it was possible to make tweaks to the native bridge crossing to speed this particular app up significantly. (batching updates, custom APIs via modules)</li>
<li>Changing <code>opacity</code> instead of <code>visible</code> had no discernable affect on performance.</li>
<li>Creating the live cells on-demand, rather than all cells up front, resulted in slower performance. In this particular case, the initial overhead of creating all possible cells suits the app much better.</li>
<li>I&#8217;m curious if anyone out there has any clever ideas for speeding this up. I&#8217;m all ears.</li>
</ul>


<h2>Resources &amp; Links</h2>

<ul>
<li>Source Code: <a href="https://github.com/tonylukasavage/Automata">https://github.com/tonylukasavage/Automata</a></li>
<li>Carlos Icaza presenting Lanica&#8217;s Platino: <a href="http://player.vimeo.com/video/52802376">http://player.vimeo.com/video/52802376</a></li>
<li>Conway&#8217;s Game of Life: <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">http://en.wikipedia.org/wiki/Conway&#8217;s_Game_of_Life</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web-based STL Viewing: Three.js, WebGL, and Javascript Typed Arrays]]></title>
    <link href="http://tonylukasavage.github.com/blog/2013/04/10/web-based-stl-viewing-three-dot-js/"/>
    <updated>2013-04-10T10:50:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2013/04/10/web-based-stl-viewing-three-dot-js</id>
    <content type="html"><![CDATA[<p><a class="fancybox.iframe" href="http://tonylukasavage.github.com/images/github_stl.png" ><img src="http://tonylukasavage.github.com/images/github_stl.png" style="width:33%; float:right; margin-left:10px;"></a></p>

<p><strong>Get the full demo:</strong> <a href="https://github.com/tonylukasavage/jsstl">jsstl on Github</a></p>

<p>Recently Github announced that they were <a href="https://github.com/blog/1465-stl-file-viewing">integrating a web-based STL viewer into their interface</a>. The <a href="http://en.wikipedia.org/wiki/STL_(file_format)">STL file format</a> has become very well known as of late do to the growing popularity of 3D printing among makers. STL is the format of choice for most 3D printing devices and is as such the format used by almost all accompanying software. So whether you want to print, manage STL files, or convert them to some other format, you need to get to know them well.</p>

<!-- more -->


<p>Seeing as how I&#8217;m not a maker but I am intrigued by the 3D printing process, about a year ago I implemented a pure Javascript STL parser (both ascii and binary format) and web-based renderer. It&#8217;s far from polished, but more than usable. Go ahead and check it out <a href="https://github.com/tonylukasavage/jsstl">on Github</a>. It makes use of a few cool technologies, including <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays">Javascript typed arrays</a>, WebGL, and <a href="http://threejs.org/">three.js</a>.</p>

<h2>Binary Parsing</h2>

<p>Parsing the ascii format of STL files was pretty straight forward based on the <a href="http://en.wikipedia.org/wiki/STL_(file_format)#ASCII_STL">specification</a>. Verbose, but easy. The binary format on the other hand was a bit trickier. Javascript isn&#8217;t exactly known for its robust binary data handling. Despite this shortcoming, I really wanted to see if I could handle this in pure Javascript. Enter <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays">Javascript typed arrays</a>.</p>

<div class="warning">Javascript typed arrays are a relatively new addition to some major browsers (see also, IE). Check compatibility here: <a href="http://caniuse.com/typedarrays">caniuse.com/typedarrays</a></div>


<p>I won&#8217;t go into it all too deeply here, other than to say that they make binary parsing possible in Javascript. ArrayBuffers represent a generic, fixed-length data buffer, in this case used to store the data from a binary formatted STL file. The DataView in turn exposes a low-level interface for reading, manipulating, and writing ArrayBuffers. Both are used in conjunction to read and pull apart the binary STL into a format that can be used by the web-based rendering engine.</p>

<p>This small snippet below shows how a binary STL file can be read using the DataView. Be sure to check out the APIs for <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays/DataView">DataView</a> and <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays/ArrayBuffer">ArrayBuffer</a> to get the full scope of what they can do.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// &quot;stl&quot; represents a raw STL binary read from HTTP response data</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">parseStlBinary</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// create three.js geometry object, discussed later</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">geo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The stl binary is read into a DataView for processing</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DataView</span><span class="p">(</span><span class="nx">stl</span><span class="p">,</span> <span class="mi">80</span><span class="p">);</span> <span class="c1">// 80 == unused header</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">isLittleEndian</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Read a 32 bit unsigned integer</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">triangles</span> <span class="o">=</span> <span class="nx">dv</span><span class="p">.</span><span class="nx">getUint32</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">isLittleEndian</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">offset</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">triangles</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Get the normal for this triangle by reading 3 32 but floats</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">normal</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span>
</span><span class='line'>            <span class="nx">dv</span><span class="p">.</span><span class="nx">getFloat32</span><span class="p">(</span><span class="nx">offset</span><span class="p">,</span> <span class="nx">isLittleEndian</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">dv</span><span class="p">.</span><span class="nx">getFloat32</span><span class="p">(</span><span class="nx">offset</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span> <span class="nx">isLittleEndian</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">dv</span><span class="p">.</span><span class="nx">getFloat32</span><span class="p">(</span><span class="nx">offset</span><span class="o">+</span><span class="mi">8</span><span class="p">,</span> <span class="nx">isLittleEndian</span><span class="p">)</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>        <span class="nx">offset</span> <span class="o">+=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Get all 3 vertices for this triangle, each represented</span>
</span><span class='line'>        <span class="c1">// by 3 32 bit floats.</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">geo</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span>
</span><span class='line'>                <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span>
</span><span class='line'>                    <span class="nx">dv</span><span class="p">.</span><span class="nx">getFloat32</span><span class="p">(</span><span class="nx">offset</span><span class="p">,</span> <span class="nx">isLittleEndian</span><span class="p">),</span>
</span><span class='line'>                    <span class="nx">dv</span><span class="p">.</span><span class="nx">getFloat32</span><span class="p">(</span><span class="nx">offset</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span> <span class="nx">isLittleEndian</span><span class="p">),</span>
</span><span class='line'>                    <span class="nx">dv</span><span class="p">.</span><span class="nx">getFloat32</span><span class="p">(</span><span class="nx">offset</span><span class="o">+</span><span class="mi">8</span><span class="p">,</span> <span class="nx">isLittleEndian</span><span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>            <span class="nx">offset</span> <span class="o">+=</span> <span class="mi">12</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// there&#39;s also a Uint16 &quot;attribute byte count&quot; that we</span>
</span><span class='line'>        <span class="c1">// don&#39;t need, it should always be zero.</span>
</span><span class='line'>        <span class="nx">offset</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Create a new face for from the vertices and the normal</span>
</span><span class='line'>        <span class="nx">geo</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">i</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span> <span class="nx">i</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">i</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="nx">normal</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// continue parsing STL faces for rendering...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Rendering</h2>

<p>Since STLs represent real objects, they obviously need to be rendered in 3 dimensions. On the web we have a few choices for that, but I&#8217;m going to let my framework of choice do the selection for me. In this case I used <a href="http://threejs.org/">three.js</a>. Three.js has exposed a 3D rendering API in Javascript that is compatible with both WebGL and the HTML5 canvas element. In this way you can gracefully fail back to canvas when operating in a browser that does not support the higher performing WebGL.</p>

<p>It&#8217;s not dumb luck that I chose to use this terrific library, I&#8217;ve used it before. Over a year ago I used three.js and <a href="http://www.appcelerator.com/platform/titanium-platform/">Titanium</a> to create an experimental 3D demonstration across multiple mobile devices using socket communication in realtime. Instead of trying to explain it all, you can check out the screencast I did regarding it below. This is part 3 of a 3 part series. Click <a href="http://vimeopro.com/appcelerator/forging-titanium/video/32976053">here</a> to check out the previous parts.</p>

<iframe src="http://player.vimeo.com/video/32976053" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>So needless to say I was already primed to use it again. In the STL viewer I would be using it to render the 3D triangle information from the STL files into faces of a mesh. This turned out to be pretty easy with three.js. The snippet below shows how I took the data I read from the STL in the <a href="#parsing">Binary Parsing</a> section above and then used it to render a series of triangles that would compose a mesh of the STL object.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mesh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span>
</span><span class='line'>    <span class="c1">// the &quot;geo&quot; object we filled with normals and vertices above</span>
</span><span class='line'>    <span class="nx">geo</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create a material for the mesh</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">overdraw</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">color</span><span class="o">:</span> <span class="mh">0xaa0000</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">shading</span><span class="o">:</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. The hard part was done creating that <code>geo</code> object. We now have the <code>mesh</code> object to which we can add to a prepared three.js scene. For the full code, check the <a href="https://github.com/tonylukasavage/jsstl">repo</a>.</p>

<h2>The Result</h2>

<p>To keep things interesting, naturally I chose a weird, frankenstein of an STL in <a href="http://www.thingiverse.com/thing:10367">octocat</a> that I found on <a href="http://www.thingiverse.com">thingiverse.com</a> for my testing. I did this for 3 reasons.</p>

<ol>
<li>It was too unusual and cool to pass up.</li>
<li>It had both the ascii and binary format available.</li>
<li>It&#8217;s composed of almost 38,000 triangles. I wanted to see how well a web-based 3D renderer could handle a complex model.</li>
</ol>


<p>So without further ado, here&#8217;s the end result, provided <a href="http://caniuse.com/typedarrays">your browser supports it</a>. Feel free to use, bend, mold, and/or steal this code as you like. A <a href="https://twitter.com/tonylukasavage">digital high five</a> would be nice, but is not required.</p>

<iframe src="http://tonylukasavage.github.com/projects/stl_viewer/index.html" width="100%" height="300"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspecting SQLite databases on Android and iOS]]></title>
    <link href="http://tonylukasavage.github.com/blog/2013/04/08/inspecting-sqlite-databases-on-android-and-ios/"/>
    <updated>2013-04-08T10:30:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2013/04/08/inspecting-sqlite-databases-on-android-and-ios</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://tonylukasavage.github.com/images/sqlite_logo.png"></p>

<p>One aspect of my current project, the <a href="https://github.com/appcelerator/alloy">Alloy MVC framework</a> for building cross-platform mobile apps, is simple integration with local storage via SQLite databases. SQLite is a powerful and relatively simple way to store data for offline use, or just to cache remote data to speed up interactions. Unfortunately, the current data and structure of SQLite databases can sometimes be tricky to ascertain when housed on mobile devices, emulators, and simulators. This is especially true when developing for multiple platforms and having gone through multiple iterations of your data structure.</p>

<!-- more -->


<p>Jump to: <a href="#sqlite3">sqlite3 command</a> | <a href="#android">Android</a> | <a href="#ios">iOS</a> | <a href="#inspecting">SQLite database inspection</a></p>

<p>There&#8217;s some common things it would be great to know quickly about your deployed databases, like:</p>

<ul>
<li>What SQLite database files are installed?</li>
<li>What tables are created on those databases?</li>
<li>What is the structure of the tables? Primary keys?</li>
<li>What records are present on the tables? This is critical in determining if you model layer is working as expected.</li>
</ul>


<p>In order to make this a little less painful of an experience, let&#8217;s take a look at a very simple way to inspect SQLite databases, and where we can find those databases on various mobile platforms. First we&#8217;ll need a tool to actually interact with a SQLite database&#8230;</p>

<p><a name="sqlite3"></a></p>

<h2>sqlite3</h2>

<p>My weapon of choice is generally the command line. For that reason I tend to stick to the <a href="http://www.sqlite.org/download.html">sqlite3</a> command line tool. It comes preloaded on Mac OSX and is available for all other major OSes. Interacting with a SQLite database becomes as easy as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ sqlite3 /path/to/database
</span><span class='line'>SQLite version 3.7.12 2012-04-03 19:43:07
</span><span class='line'>Enter &quot;.help&quot; for instructions
</span><span class='line'>Enter SQL statements terminated with a &quot;;&quot;
</span><span class='line'>sqlite&gt; .tables
</span><span class='line'>table1
</span><span class='line'>table2
</span><span class='line'>table3
</span></code></pre></td></tr></table></div></figure>


<p>You can quickly get to know the rest of the commands by executing <code>.help</code> in the sqlite3 prompt. Remember to include the <code>.</code> before the name of the command.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ sqlite3
</span><span class='line'>SQLite version 3.7.12 2012-04-03 19:43:07
</span><span class='line'>Enter &quot;.help&quot; for instructions
</span><span class='line'>Enter SQL statements terminated with a &quot;;&quot;
</span><span class='line'>sqlite&gt; .help
</span><span class='line'>.backup ?DB? FILE      Backup DB (default &quot;main&quot;) to FILE
</span><span class='line'>.bail ON|OFF           Stop after hitting an error.  Default OFF
</span><span class='line'>.databases             List names and files of attached databases
</span><span class='line'>.dump ?TABLE? ...      Dump the database in an SQL text format
</span><span class='line'>                         If TABLE specified, only dump tables matching
</span><span class='line'>                         LIKE pattern TABLE.
</span><span class='line'>.echo ON|OFF           Turn command echo on or off
</span><span class='line'>.exit                  Exit this program
</span><span class='line'>.explain ?ON|OFF?      Turn output mode suitable for EXPLAIN on or off.
</span><span class='line'>                         With no args, it turns EXPLAIN on.
</span><span class='line'>.header(s) ON|OFF      Turn display of headers on or off
</span><span class='line'>.help                  Show this message
</span><span class='line'>.import FILE TABLE     Import data from FILE into TABLE
</span><span class='line'>.indices ?TABLE?       Show names of all indices
</span><span class='line'>                         If TABLE specified, only show indices for tables
</span><span class='line'>                         matching LIKE pattern TABLE.
</span><span class='line'>.log FILE|off          Turn logging on or off.  FILE can be stderr/stdout
</span><span class='line'>.mode MODE ?TABLE?     Set output mode where MODE is one of:
</span><span class='line'>                         csv      Comma-separated values
</span><span class='line'>                         column   Left-aligned columns.  (See .width)
</span><span class='line'>                         html     HTML &lt;table&gt; code
</span><span class='line'>                         insert   SQL insert statements for TABLE
</span><span class='line'>                         line     One value per line
</span><span class='line'>                         list     Values delimited by .separator string
</span><span class='line'>                         tabs     Tab-separated values
</span><span class='line'>                         tcl      TCL list elements
</span><span class='line'>.nullvalue STRING      Print STRING in place of NULL values
</span><span class='line'>.output FILENAME       Send output to FILENAME
</span><span class='line'>.output stdout         Send output to the screen
</span><span class='line'>.prompt MAIN CONTINUE  Replace the standard prompts
</span><span class='line'>.quit                  Exit this program
</span><span class='line'>.read FILENAME         Execute SQL in FILENAME
</span><span class='line'>.restore ?DB? FILE     Restore content of DB (default &quot;main&quot;) from FILE
</span><span class='line'>.schema ?TABLE?        Show the CREATE statements
</span><span class='line'>                         If TABLE specified, only show tables matching
</span><span class='line'>                         LIKE pattern TABLE.
</span><span class='line'>.separator STRING      Change separator used by output mode and .import
</span><span class='line'>.show                  Show the current values for various settings
</span><span class='line'>.stats ON|OFF          Turn stats on or off
</span><span class='line'>.tables ?TABLE?        List names of tables
</span><span class='line'>                         If TABLE specified, only list tables matching
</span><span class='line'>                         LIKE pattern TABLE.
</span><span class='line'>.timeout MS            Try opening locked tables for MS milliseconds
</span><span class='line'>.vfsname ?AUX?         Print the name of the VFS stack
</span><span class='line'>.width NUM1 NUM2 ...   Set column widths for &quot;column&quot; mode
</span><span class='line'>.timer ON|OFF          Turn the CPU timer measurement on or off
</span></code></pre></td></tr></table></div></figure>


<p><a name="android"></a></p>

<h2>Android</h2>

<div class="info">INFO: This section assumes you have an android SDK toolkit on your path.</div>


<p>The nice thing about the Android interface is that we can use a single command to find the SQLite databases on both emulators and devices. Assuming you have an open emulator and/or connected Android devices, execute <code>adb devices</code> to get a listing of their serial numbers.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ adb devices
</span><span class='line'>List of devices attached
</span><span class='line'>emulator-5560   device
</span><span class='line'>MYSERIAL        device
</span></code></pre></td></tr></table></div></figure>


<p>So now connecting to an emulator or device is easy. Just pick the target serial number and execute <code>adb -s MYSERIAL shell</code>. We&#8217;ll use this shell for the duration of the :</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ adb -s MYSERIAL shell
</span><span class='line'>#
</span></code></pre></td></tr></table></div></figure>


<p>All commands from here on in will assume you are already connected via <code>adb shell</code>.</p>

<p>Now that we&#8217;re connected to the target Android device/emulator, let&#8217;s get a list of the SQLite databases installed on our target app. To find that, we&#8217;ll first need our target app&#8217;s ID. It&#8217;s typically a domain name format, like <code>com.somedomain.someapp</code>. If you don&#8217;t know how to find your app ID, you can always list the installed apps on your device/emulator with the adb shell and search there:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># ls data/data
</span><span class='line'>com.android.email
</span><span class='line'>com.android.alarmclock
</span><span class='line'>com.android.settings
</span><span class='line'>com.google.android.apps.maps
</span><span class='line'>com.android.wallpaper.livepicker
</span><span class='line'>com.android.vending
</span><span class='line'>com.android.htmlviewer
</span><span class='line'>...
</span><span class='line'>com.appcelerator.Harness
</span></code></pre></td></tr></table></div></figure>


<p>In this case we&#8217;ll use <code>com.appcelerator.Harness</code> as the target app, which happens to be the test harness app I used for testing <a href="https://github.com/appcelerator/alloy">Alloy</a>. Now we just need to list the databases installed on this app:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># ls data/data/com.appcelerator.Harness/databases
</span><span class='line'>users
</span><span class='line'>Titanium
</span></code></pre></td></tr></table></div></figure>


<p>In this case we find 2 installed databases, <code>users</code> and <code>Titanium</code>. Congrats, you found your Android SQLite databases. To start inspecting, you just need to open up the database file with the <code>sqlite3</code> command while in the adb shell. That is, Android already has <code>sqlite3</code> available at its shell, so you can use it directly from the shell:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># sqlite3 data/data/com.appcelerator.Harness/databases
</span><span class='line'>SQLite version 3.6.22
</span><span class='line'>Enter &quot;.help&quot; for instructions
</span><span class='line'>Enter SQL statements terminated with a &quot;;&quot;
</span><span class='line'>sqlite&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Now you&#8217;ve got yourself full access to the live SQLite database on your Android emulator/device. To take a look at a handful of useful ways to inspect your database from the sqite3 prompt, check out the <a href="#inspecting">inspecting your SQLite database</a> section.</p>

<p><a name="ios"></a></p>

<h2>iOS</h2>

<div class="info">INFO: These instructions are relevant to OS X 10.8.2, other versions may vary.</div>


<p>Unlike Android, you&#8217;ll have to take a different approach in locating your SQLite database(s) depending on whether you are inspecting a simulator or device. It&#8217;s actually pretty easy on the simulator. Devices, on the other hand, are a bit more of a pain in the ass to work with with respect to SQLite databases. So it goes with iOS.</p>

<h3>Simulator</h3>

<p>To find a SQLite database on an iPhone/iPad simulator, let&#8217;s first track down a listing of all the installed applications. To find this you&#8217;ll need your current Mac username as well as the iOS version of the simulator you are running. For this example let&#8217;s assume the following:</p>

<ul>
<li>My username is <strong>tlukasavage</strong></li>
<li>iOS SDK version is <strong>6.1</strong></li>
</ul>


<p>To list the applications we now execute the following. You can use Finder, but I prefer the CLI:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ cd /Users/tlukasavage/Library/Application\ Support/iPhone\ Simulator/6.1/Applications
</span><span class='line'>$ ls
</span><span class='line'>25D2F0D4-B225-4E19-A830-4EE6DB0093A0
</span><span class='line'>70F04874-8486-46FE-AD01-DFD04CB3B361
</span><span class='line'>A8D5AC32-4C09-452D-8DC0-BCA15178721F
</span><span class='line'>4A84AB30-3306-4108-93BE-A9AC3217A89B
</span><span class='line'>88045DAE-C8F1-4B58-8E0D-B382C8E5D0FC
</span><span class='line'>D1F75E68-C8A7-442E-A5E5-8485ACD4420B
</span></code></pre></td></tr></table></div></figure>


<p>Now you need to select which app ID is the one that corresponds to your installed app. For this example, we&#8217;ll assume it&#8217;s <code>25D2F0D4-B225-4E19-A830-4EE6DB0093A0</code>. Once you&#8217;ve determined that, we&#8217;ll dig a little bit deeper to find the actual location of that app&#8217;s SQLite databases. Bear in mind, if the following directories don&#8217;t exist in your app, you likely don&#8217;t actually have a SQLite database installed. We&#8217;ll continue from the previous code block:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ cd 25D2F0D4-B225-4E19-A830-4EE6DB0093A0/Library/Private\ Documents
</span><span class='line'>$ ls
</span><span class='line'>_alloy_.sqlite
</span><span class='line'>some_other_db.sqlite
</span><span class='line'>test.sqlite
</span></code></pre></td></tr></table></div></figure>


<p>Hey look, there&#8217;s our databases! Now that we have the location, opening up the databases is as easy as issuing the <code>sqlite3</code> command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ sqlite3 _alloy_.sqlite
</span><span class='line'>SQLite version 3.7.12 2012-04-03 19:43:07
</span><span class='line'>Enter &quot;.help&quot; for instructions
</span><span class='line'>Enter SQL statements terminated with a &quot;;&quot;
</span><span class='line'>sqlite&gt;
</span></code></pre></td></tr></table></div></figure>


<p>You can now hop to the <a href="#inspecting">inspecting your SQLite database</a> section to see what you can do with it.</p>

<h3>Device</h3>

<div class="info">INFO: This section assumes you have XCode 4+.</div>


<p>It&#8217;s unfortunate, but on iOS we don&#8217;t really have a good CLI method for accessing the on-device SQLite database like we do with Android. For this, we&#8217;ll need to crack open Xcode, and more specifically Organizer.</p>

<p>Open up Xcode and then hit <code>SHIFT+CMD+2</code> or go to <code>Window -&gt; Organizer</code> to open up Organizer. In there we&#8217;ll find a listing of your currently configured iOS devices. Follow these steps to retrieve the SQLite database (and additional application data) on your target device:</p>

<ol>
<li>Select the device in the left panel, in my case <strong>Tony Lukasavage&#8217;s iPad</strong>.</li>
<li>Expand the device and select <strong>Applications</strong>.</li>
<li>In the top right panel select your target application, in this case <strong>Harness</strong>.</li>
<li>In the &#8220;Data Files in Sandbox&#8221; panel, make sure your SQLite database file is present under the &#8220;Library/Private Documents&#8221; folder. In this case it&#8217;s <strong>_alloy_.sqlite</strong>.</li>
<li>Download the application data in a &#8220;xcappdata&#8221; file by clicking on the <strong>Download</strong> button at the bottom of Organizer. It should save the file with a long file name that includes your app&#8217;s ID and a timestamp. In this case, mine is <strong>com.appcelerator.Harness 2013-04-07 13.24.32.633.xcappdata</strong>.</li>
</ol>


<p><img src="http://tonylukasavage.github.com/images/organizer1.png"></p>

<p>Now that you have the app data downloaded, we just need to navigate to the embedded SQLite database and you&#8217;ll be free to use <code>sqlite3</code> on it. Assuming you downloaded the xcappdata file to your current path, this is how you would find it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ cd com.appcelerator.Harness\ 2013-04-07\ 13.24.32.633.xcappdata/AppData/Library/Private\ Documents
</span><span class='line'>$ sqlite3 _alloy_.sqlite
</span><span class='line'>SQLite version 3.7.12 2012-04-03 19:43:07
</span><span class='line'>Enter &quot;.help&quot; for instructions
</span><span class='line'>Enter SQL statements terminated with a &quot;;&quot;
</span><span class='line'>sqlite&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Though a bit more effort than the simulator, you now have full access to the SQLite database from your iOS device. Move on to the next section for some tips of what you can do with it to learn more about your app.</p>

<p><a name="inspecting"></a></p>

<h2>Inspecting the SQLite database</h2>

<p>Now that you&#8217;ve found your app&#8217;s SQLite database, here&#8217;s a hadful of useful commands to inspect its state and contents. While it takes various methods to access these database files, interacting is exactly the same on all when using the <code>sqlite3</code> tool.</p>

<h3>Commands</h3>

<figure class='code'><figcaption><span>List tables installed on current database  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>sqlite&gt; .tables
</span><span class='line'>
</span><span class='line'>android_metadata  migrations        users
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Show CREATE statement for table &#8220;users&#8221;  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>sqlite&gt; .schema users
</span><span class='line'>
</span><span class='line'>CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT,name TEXT,color TEXT);
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Show table info for table &#8220;users&#8221;  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>sqlite&gt; pragma table_info(&#39;users&#39;);
</span><span class='line'>
</span><span class='line'>cid | name | type | notnull | dflt_value | pk
</span><span class='line'>0|id|INTEGER|0||1
</span><span class='line'>1|name|TEXT|0||0
</span><span class='line'>2|color|TEXT|0||0
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SELECT rows from table &#8220;users&#8221;  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>sqlite&gt; SELECT * FROM users;
</span><span class='line'>
</span><span class='line'>1|Tony|blue
</span><span class='line'>2|Chris|red
</span><span class='line'>3|Bryan|red
</span><span class='line'>4|Christian|blue
</span><span class='line'>5|Ingo|orange
</span></code></pre></td></tr></table></div></figure>


<p>This is only a very small sampling of quick things you can check to find the current state of your SQLite databases. For more details on the full functionality of the sqlite3 command, be sure to check out the <a href="http://www.sqlite.org/docs.html">full documentation</a>.</p>

<h2>Additional Tools</h2>

<h3>SQLite Manager</h3>

<p>I&#8217;d highly suggest taking the time to learn the CLI and the syntax of SQLite itself. If, however, you prefer a GUI&#8230;</p>

<p><img src="http://tonylukasavage.github.com/images/sqlite_manager.png" alt="SQLite Manager screenshots" /></p>

<p>Honestly, I&#8217;m not a huge fan of Firefox, but it has one nice thing going for it: <a href="https://addons.mozilla.org/en-us/firefox/addon/sqlite-manager/">SQLite Manager</a>. SQLite Manager is a Firefox add-on that provides a simple, clean interface for interacting with SQLite databases. Not much in the way of bells and whistles, but hey, this is SQLite, there&#8217;s not a lot of bells and whistles in the first place. The nice part about it is it&#8217;s free and it will work anywhere Firefox will.</p>

<p>You can choose and SQLite app you like, but I recommend this one for the sake of its price, availability, and simplicity. If you aren&#8217;t a command line warrior, this is a solid tool to lean on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flashback: My Old Away3D Experiments]]></title>
    <link href="http://tonylukasavage.github.com/blog/2013/02/26/flashback-my-old-away3d-experiments/"/>
    <updated>2013-02-26T22:08:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2013/02/26/flashback-my-old-away3d-experiments</id>
    <content type="html"><![CDATA[<p><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/image3d/sandbox.html" ><img src="http://tonylukasavage.github.com/images/image3d1.jpg" style="width:33%; float:left; margin-right:10px;"></a></p>

<p>Back before before joining the <a href="http://www.appcelerator.com/">Appcelerator</a> team about a year and a half ago, I was working a typical 9 to 5 enterprise development job. While this was nothing more than a paycheck, it did afford me copious amounts of time to experiment on personal projects before I finally fell in love with cross-platform mobile development. My first true love in this experimental coding was interactive 3D using Flash and <a href="http://away3d.com/">Away3D</a>.</p>

<!-- more -->


<p>I had always been a back-end dev, mostly C/C++, working on Linux servers for about the first 7 years of my career. With these experiments, I wanted to get way out of my comfort zone. I wanted to not just learn a new programming language and tooling, but entirely new concepts for interacting with computers. To this end, I dove head-long into learning Away3D with the express purpose of developing demos that had no goal other than pure coding fun.</p>

<p><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/cash/cash.html" ><img src="http://tonylukasavage.github.com/images/cash.jpg" style="width:33%; float:right; margin-right:10px;"></a></p>

<p>While I never really became much more than a novice-intermediate 3D developer, I did crank out of a bunch of cool looking demos, not to mention made tons of friends and contacts in the Flash/Flex/AS3 world. If it wasn&#8217;t for those guys, I wouldn&#8217;t be the Twitter junkie I am today, which directly led to my current job with Appcelerator (<em>just ask <a href="https://twitter.com/fusion94">this guy</a></em>). In short, these seemingly purposeless experiments led to the most amazing experiences thus far in my professional career.</p>

<p>And without further ado, dug up from the archives of my <a href="http://savagelook.com/blog/">old blog</a> I present the aforementioned experiments in Flash and Away3D. Enjoy<sup>*</sup>!</p>

<p><em>These are not optimized for mobile and probably won&#8217;t run properly even on mobile devices that support Flash.</em></p>

<ul id="grid">
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/face_picking/sandbox.html" ><img src="http://tonylukasavage.github.com/images/face_picking.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/materials/sandbox.html" ><img src="http://tonylukasavage.github.com/images/materials.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/normals_align/sandbox.html" ><img src="http://tonylukasavage.github.com/images/normals2.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/text_demo/text_demo.html" ><img src="http://tonylukasavage.github.com/images/text.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/carousel/sandbox.html" ><img src="http://tonylukasavage.github.com/images/carousel.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/projects/savagelook_1.0/index.html" ><img src="http://tonylukasavage.github.com/images/savagelook_1.0.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/shadows/Shadows.html" ><img src="http://tonylukasavage.github.com/images/shadows.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/3ds_load/sandbox.html" ><img src="http://tonylukasavage.github.com/images/torusknot1.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/image3d/sandbox.html" ><img src="http://tonylukasavage.github.com/images/image3d1.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/webcam/webcam.html" ><img src="http://tonylukasavage.github.com/images/webcamp.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/box2d/box2d.swf" ><img src="http://tonylukasavage.github.com/images/box2d.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/reflect_away3d/reflect_away3d.html" ><img src="http://tonylukasavage.github.com/images/reflect3.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/jiglib_away3d/jiglib_away3d.html" ><img src="http://tonylukasavage.github.com/images/jiglib_big.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/reflect_camera2/reflect_camera.html" ><img src="http://tonylukasavage.github.com/images/bigreflect.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/cash/cash.html" ><img src="http://tonylukasavage.github.com/images/cash.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/away3d_heightmap/away3d_heightmap.html" ><img src="http://tonylukasavage.github.com/images/water.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/away3d_morph/away3d_morph.html" ><img src="http://tonylukasavage.github.com/images/morph.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/away3d_HeightMapModifier/away3d_HeightMapModifier.html" ><img src="http://tonylukasavage.github.com/images/hmm.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/away3d_motion/away3d_motion.html" ><img src="http://tonylukasavage.github.com/images/motionblur.jpg" width="150" height="150"></a></li>
    <li><a class="fancybox.iframe" href="http://tonylukasavage.github.com/demos/away3d_drunk/away3d_drunk.html" ><img src="http://tonylukasavage.github.com/images/drunk.jpg" width="150" height="150"></a></li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Joys of Screen Scraping]]></title>
    <link href="http://tonylukasavage.github.com/blog/2012/03/01/the-joys-of-screen-scraping/"/>
    <updated>2012-03-01T15:14:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2012/03/01/the-joys-of-screen-scraping</id>
    <content type="html"><![CDATA[<h2>Knucklehead Up and Running Again</h2>


<p>For about a week there my MMA fighter app for Android, <a href="https://market.android.com/details?id=com.savagelook.knucklehead" target="_blank">Knucklehead</a>, has been out of commission. The reason is that the site that I scrape for data, <a href="http://sherdog.com" target="_blank">Sherdog</a> was completely redesigned. I needed to rework a lot of my PHP-based screen scraping code to make it work. My PHP is rusty, but fortunately, my regular expression chops are always sharp. In any case, it&#8217;s back to working order now.</p>

<p>Maybe with a little luck I can get people to re-rate those 1-star ratings I got while it was down. If not, perhaps I can guilt people into giving me good ratings by saying that it&#8217;s my newborn son&#8217;s fault I didn&#8217;t get to it sooner. I mean, really, are you going to give the father of this child a hard time? Don&#8217;t be so heartless. :)</p>

<p><a href="http://tonylukasavage.github.com/images/charlie.png"><img src="http://tonylukasavage.github.com/images/charlie.png" alt="" title="charlie" width="600" height="400" class="alignnone size-full wp-image-3507" /></a></p>

<h2 style="padding-top:20px;">Screen Scraping Tips</h2>


<p>As we all know, screen scraping is pretty much the most <span style="color:#a00">volatile</span> way to supply your apps with data. While no amount of planning can permanently future-proof your screen scraper, there&#8217;s some things you can do to make it easier.</p>

<ul style="padding-bottom:20px;">
    <li><strong>Define a data model for what you are scraping</strong>. What made my project relatively easy to get working again was that I had a clearly defined data model shared by both the backend and frontend. In my case, this is a LAMP stack and distributed Android app respectively. Now my users don&#8217;t need to download a new version of my app in order to get the fix. It just works now.</li>
    <li><strong>Code the scraper on a backend proxy</strong>, not in the app itself. That way, when your scraper inevitably gets broken at some point (after a year in my case), you only need to change the code in one place. This goes hand-in-hand with defining a data model.</li>
    <li><strong>Keep it simple stupid</strong>. Don&#8217;t over-architect a screen scraper. Most data processing code will change over time, but a screen scraper may need a total rewrite at some point. Put all your software engineering skills into controlling what leaves the scraper, but play it pretty loose with what the scraper is going to be processing.</li>
    <li><strong>Using JSON? You better be using <a href="http://jsonlint.com" target="_blank">jsonlint.com</a> too</strong>. jsonlint.com can save you a lot of time and aggravation when it comes to creating and processing your scraped data. Not only does it validate your JSON, but it will also pretty print it so it&#8217;s easy to read through yourself.</li>
</ul>


<p>That&#8217;s just a couple things that made fixing my scraper a lot less painful. You guys out there have any tips? I&#8217;d love to hear them. All things being equal, I hope I never have to screen scrape for data ever again. But since that&#8217;s pretty unlikely, it&#8217;s good to be prepared for the inevitable obstacles that scraping will present.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Path menu with Appcelerator Titanium]]></title>
    <link href="http://tonylukasavage.github.com/blog/2012/02/15/path-menu-with-appcelerator-titanium/"/>
    <updated>2012-02-15T20:57:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2012/02/15/path-menu-with-appcelerator-titanium</id>
    <content type="html"><![CDATA[<h2>Here we go again&#8230;</h2>


<p>Yep, another cross-post from the Appcelerator blog. This time it shows off how I managed to implement the dynamic and unique <a href="https://path.com" target="_blank">Path</a> menu in Titanium. From a single code base the menu is fully functional, with native performance, on both Android and iOS.</p>

<ul style="padding-bottom:20px;">
<li><a href="http://developer.appcelerator.com/blog/2012/02/forging-titanium-episode-22-path-like-menu.html" target="_blank">Original blog post</a></li>
<li><a href="https://github.com/appcelerator-developer-relations/Forging-Titanium/tree/master/ep-022" target="_blank">Full source code on Github</a></li>
</ul>




<h2>Video</h2>




<iframe src="http://player.vimeo.com/video/36846582?title=0&amp;byline=0&amp;portrait=0" width="600" height="340" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D, Sockets, and Native Android with Appcelerator Titanium]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/12/02/3d--sockets--and-native-android-with-appcelerator-titanium/"/>
    <updated>2011-12-02T09:22:00-05:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/12/02/3d&#8211;sockets&#8211;and-native-android-with-appcelerator-titanium</id>
    <content type="html"><![CDATA[<p>Yeah, yet another cross-post from the Appcelerator Developer blog. This was a fun one, though, where I got to show off some really cool features and functionality of the <a href="http://wiki.appcelerator.org/display/guides/Quick+Start" target="_blank">Titanium platform</a>. There&#8217;s a lot covered so it&#8217;s stretched over a 3 part series. I&#8217;ve brought them all together here for your viewing pleasure. The <b>original blog post links</b> included with each video contain links for all the source code and references associated with each video.</p>

<p>Here&#8217;s the 10 second summary of each part:</p>

<ol>
  <li>Create a <a href="http://wiki.appcelerator.org/display/guides/Android+Module+Development+Guide" target="_blank">native Android module</a> to determine a device&#8217;s physical orientation as <a href="http://en.wikipedia.org/wiki/Azimuth#Navigation" target="_blank">azimuth</a>, pitch, and roll</li>
  <li>Use the above data to animate and render a 3D model using a <a href="http://developer.appcelerator.com/apidoc/mobile/latest/Titanium.UI.WebView-object" target="_blank">Titanium WebView</a> &lt;canvas&gt; and <a href="https://github.com/mrdoob/three.js/" target="_blank">Three.js</a></li>
  <li>Represent this 3D model on multiple remote client devices simultaneously using high volume, realtime network communication via <a href="http://wiki.appcelerator.org/display/guides/Sockets" target="_blank">Titanium Sockets</a></li>
</ol>




<hr>


<h2>Part 1 - Native Android Module</h2>


<p><b>>>></b> <a href="http://developer.appcelerator.com/blog/2011/11/forging-titanium-episode-14-twisti-part-1-android-module.html">Original blog post</a></p>

<iframe src="http://player.vimeo.com/video/31868247?title=0&amp;byline=0&amp;portrait=0" width="600" height="338" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<hr>




<h2>Part 2 - 3D With Three.js</h2>


<p><b>>>></b> <a href="http://developer.appcelerator.com/blog/2011/11/forging-titanium-episode-15-twisti-part-2-3d-with-three-js.html">Original blog post</a></p>

<iframe src="http://player.vimeo.com/video/32102962?title=0&amp;byline=0&amp;portrait=0" width="600" height="338" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<hr>




<h2>Part 3 - Sockets</h2>


<p><b>>>></b> <a href="http://developer.appcelerator.com/blog/2011/12/forging-titanium-episode-16-twisti-part-3-sockets.html">Original blog post</a></p>

<iframe src="http://player.vimeo.com/video/32976053?title=0&amp;byline=0&amp;portrait=0" width="600" height="338" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forms with Appcelerator Titanium]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/10/14/forms-with-appcelerator-titanium/"/>
    <updated>2011-10-14T07:49:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/10/14/forms-with-appcelerator-titanium</id>
    <content type="html"><![CDATA[<p>I don&#8217;t cross post often from the <a href="http://developer.appcelerator.com/blog/" target="_blank">developer blog over at Appcelerator</a>, but people seem to be liking this screencast so I thought I&#8217;d share. I put together some code and a video showing off how you can you use cross platform design, modular Javascript, and of course, Titanium to deliver a simplified interface for creating forms in your mobile apps. Aside from it being easy for developers to implement, there&#8217;s also a special focus on making the forms as easy to navigate as possible for the end user.</p>

<p>I&#8217;ve tried not to overpopulate this blog with Appcelerator content ever since joining them as a platform evangelist. I think I&#8217;ve earned an Appcelerator post though after talking exclusively about PhoneGap and Adobe in my last one though. ;-)</p>

<iframe src="http://player.vimeo.com/video/30387041?title=0&amp;byline=0&amp;portrait=0" width="600" height="340" frameborder="0" webkitAllowFullScreen allowFullScreen></iframe>




<h2>Additional Resources</h2>


<ul>
<li><a href="https://github.com/appcelerator-developer-relations/Forging-Titanium/tree/master/ep-010/Forms">Forms app on Github</a></li>
<li><a href="http://developer.appcelerator.com/blog/2011/08/forging-titanium-episode-1-commonjs-modules.html">Forging Titanium Episode 1: CommonJS Modules</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adobe &amp; PhoneGap: Makes Sense, Mostly]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/10/10/adobe--amp--phonegap--makes-sense--mostly/"/>
    <updated>2011-10-10T07:57:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/10/10/adobe&#8211;amp&#8211;phonegap&#8211;makes-sense&#8211;mostly</id>
    <content type="html"><![CDATA[

<h2>Adobe Acquires Nitobi</h2>




<p>So if you haven&#8217;t heard yet, <a href="http://www.phonegap.com/2011/10/03/nitobi-enters-into-acquisition-agreement-with-adobe-2/">Adobe acquired Nitobi</a>, the company that is responsible for PhoneGap. This was announced at Adobe&#8217;s big <a href="http://max.adobe.com/">MAX conference</a>. If you are unfamiliar with PhoneGap, then this post is going to be wildly uninteresting to you. At a high level, they provide a cross platform mobile development solution that leverages native webviews with HTML5, CSS, and Javascript to create native mobile apps.</p>




<h2>Not Hard To See Coming</h2>




<p>Well, for one thing, Adobe was obviously hedging its bets on Flash/Air&#8217;s viability in the long term with mobile when they started introducing HTML5 capabilities through <a href="http://labs.adobe.com/technologies/edge/">Edge</a>. I mean, if Adobe&#8217;s planning to offer interactive, Flash-like development with HTML5, who is going to believe that Flash itself has a real future with mobile? Or as Gizmodo put it, <a href="http://gizmodo.com/5826448/adobe-ditches-flash-for-adobe-edge">Adobe Edge may become the beginning of the end for Flash</a>. Yeah, it will likely always exist, but it is <em>not</em> the de facto standard for delivering interactive web (or mobile) content anymore.</p>




<iframe width="630" height="473" src="http://www.youtube.com/embed/8FnNtX73v8k" frameborder="0" allowfullscreen></iframe>




<p>And of course there&#8217;s the whole Adobe Air for mobile thing. Android was obliging enough to make Air a first class citizen. Install Air, run Air apps&#8230; simple. And while the Adobe Air install is a bit hefty, it&#8217;s hardly something worth worrying about with today&#8217;s storage capabilities on mobile devices.</p>




<blockquote class="pquote">
    <p>&#8220;Flash has been labeled an outlaw and Air is smuggled in like an illegal immigrant&#8221;</p>
</blockquote>




<p>The more harrowing journey for Adobe has been iOS. Basically, Flash has been labeled an outlaw and Air is smuggled in like an illegal immigrant. There&#8217;s been a staring contest between Adobe and Apple for a while now, but I think it&#8217;s safe to say Adobe blinked. Apple has continually proven that is has the most marketable mobile devices available, and has done so without any back pedaling on what they will and will not allow (minus <a href="http://www.apple.com/pr/library/2010/09/09Statement-by-Apple-on-App-Store-Review-Guidelines.html">letting 3rd parties build apps</a>).</p>




<p>Something had to give if Adobe was going to get a real foothold in the mobile world, and it obviously wasn&#8217;t coming in the form of their current solutions. Enter PhoneGap&#8230;</p>




<h2>But PhoneGap is not Without Its Challenges</h2>




<p>PhoneGap fills a lot of holes for Adobe, but its going to need a lot of help itself. I think PhoneGap has gone about as far as it can on its own. It has achieved its goal of abstracting most native functionality for many different mobile platforms, but starting developers are wanting more. </p>




<p>PhoneGap has no user interface components. This is <strong><em>not</em></strong> fun for new developers&#8230; or veteran ones for that matter. You need to build everything from scratch or go out and find a UI framework that works for you. The 2 front-runners, <a href="http://www.sencha.com/products/touch/">Sencha Touch</a> and <a href="http://jquerymobile.com/">jQuery Mobile</a>, bring their own glitches and idiosyncrasies. Also, now you find yourself learning 2 frameworks that have a noticeable lack of cross-over documentation. </p>




<p>There&#8217;s also a seemingly purposeful lack of direction in terms of tooling and best practices. New developers, often web developers, are left to their own devices to find the workflow that works best for them. There&#8217;s no sanctioned IDE or set of tools suggested from PhoneGap to build your mobile apps. Infinite flexibility can be a real drag when you just want to know the most effective way to get things done.</p>




<h2>But let&#8217;s put this even more plainly&#8230;</h2>




<p>What are the pros and cons of <b>PhoneGap</b>?</p>




<table>
<tr><td><span style="font-weight:bold; font-size:14px; color:#880000">Pros</span></td><td><span style="font-weight:bold; font-size:14px; color:#880000">Cons</span></td></tr>
<tr>
<td style="width:300px; vertical-align:top;">
<ul><li>Terrific mobile platform compatibility</li>
<li>It&#8217;s an open, standards-based solution</li>
<li>Ease of entry for existing web developers</li>
<li>Large existing userbase for the above reason</li></ul>
</td>
<td style="width:300px; vertical-align:top;">
<ul style="margin-bottom:0; padding-bottom:0;">
<li>No clear direction on UI, tooling, or best practices</li>
<li>performance is limited by webview</li>
<li>Platform disparities</li>
<li>Documentation is brief and sometimes lacking</li></ul>
</td>
</tr>
</table>




<p>And what are the pros and cons of <b>Adobe</b>?</p>




<table>
<tr><td><span style="font-weight:bold; font-size:14px; color:#880000">Pros</span></td><td><span style="font-weight:bold; font-size:14px; color:#880000">Cons</span></td></tr>
<tr>
<td style="width:300px; vertical-align:top;">
<ul><li>High quality tools for integrating development and design workflows</li>
<li>With Flash and Flex, they&#8217;ve been delivering visual and UI sugar for a long time now</li>
<li>They&#8217;ve been rocking interaction before &lt;canvas&gt; was in diapers</li>
<li>They run nearly identical user experiences on each platform via Flash/Air</li>
<li>Their documentation is nothing if not expansive</li>
<li>A vehemently loyal community</li></ul>
</td>
<td style="width:300px; vertical-align:top;">
<ul><li>Weak mobile platform compatibility. Android made Air a first class citizen, but we all know the story with iOS. </li>
<li>The majority of Adobe&#8217;s tools and SDKs are closed and proprietary</li>
<li>Has not seen a lot of fresh blood lured in by their current mobile development offerings</li>
<li>You gotta pick up AS3 if you want to be effective</li></ul>
</td>
</tr>
</table>




<p>Anyone else seeing a pretty clear yin-yang thing going on here?</p>




<h2>So What Does It All Mean?</h2>




<p>Well, for one thing, it means <a href="http://arstechnica.com/open-source/news/2011/10/phonegap-to-become-an-apache-project-as-adobe-acquires-nitobi.ars">PhoneGap is becoming an Apache project</a>. Yep, they are donating PhoneGap to Apache, which puts them one step closer to their altruistic goal of PhoneGap itself becoming obsolete. PhoneGap&#8217;s own Brian Leroux stated in his <a href="http://www.slideshare.net/brianleroux/phonegap-10">PhoneGap 1.0 presentation</a> that:</p>




<blockquote>
  <p style="font-weight:bold;">&#8220;The purpose of PhoneGap is for PhoneGap to cease to exist&#8221;</p>
</blockquote>




<p>Why, oh why, did Adobe buy it then? I think it&#8217;s because they want to be your one stop shop for purchasing IDEs, frameworks, professional services, etc&#8230; Adobe is likely banking on the ongoing popularity of PhoneGap and web-based native mobile development. &#8220;Web-based native&#8221;&#8230; sounds a little like an oxymoron, but whatever.</p>




<h2>A Match Made in Heaven, Right?</h2>




<p>Sounds like a perfect match. The 2 companies seem to complement each other very well. But&#8230;</p>




<p>There&#8217;s just a few questions I still have regarding the acquisition. Rather than drone on any longer inserting my own conjecture, I&#8217;ll just list my questions here and leave them as talking points for you, my readers. </p>




<blockquote class="pquote" style="float:right;">
    <p>&#8220;I can already hear the `It&#8217;s back to AS1` complaints starting&#8230;&#8221;</p>
</blockquote>




<ul>
<li>What happens to Flash/Air for mobile? It obviously won&#8217;t be forsaken, but this can&#8217;t sit real well with developers who have so far devoted themselves to this workflow.</li>
<li>How does Adobe deal with the inevitability that current developers will revolt against using Javascript? I can already hear the &#8220;It&#8217;s back to AS1&#8221; complaints starting&#8230;</li>
<li>Does Adobe even have any interest in getting existing AS3 developers using PhoneGap? I know they are saying that they weill support both solutions, but come on, someone is gonna get more love than the other.</li>
<li>How long until we finally see a defined workflow and IDE for PhoneGap. Is Dreamweaver integration the best we get?</li>
<li>What will the PhoneGap guys do next? They are actively working to put themselves out of a job, so I&#8217;m curious what the next move is.  </li>
</ul>




<h2>What&#8217;s Next?</h2>




<p>I have no clue, but it&#8217;s sure to be interesting. I&#8217;m hoping for good things on both sides as it&#8217;s only going to make mobile development in general more exciting. </p>




<p>Will Adobe&#8217;s ability to create great tools translate to mobile success? Will PhoneGap&#8217;s strict adherence to the open web model jive well with Adobe&#8217;s history of closed, proprietary tools? Will the inevitable merge of the open web  and existing Adobe community be a bumpy one? </p>




<p>Stay tuned&#8230;</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Annoying Things About Mac OS X Lion and How To Fix Them]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/08/31/5-annoying-things-about-mac-os-x-lion-and-how-to-fix-them/"/>
    <updated>2011-08-31T07:38:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/08/31/5-annoying-things-about-mac-os-x-lion-and-how-to-fix-them</id>
    <content type="html"><![CDATA[<h2>So you&#8217;re running Mac OS X Lion&#8230;</h2>




<p>Let me start by saying that among the <a href="http://www.apple.com/macosx/whats-new/features.html">250+ new features</a> added in Lion, there are some really useful ones. Some of my favorites include:</p>




<ul>
<li><strong>Accessible from App Store</strong> - The fact that the upgrade itself is accessible from the App Store is extremely convenient. Granted, you could argue that Lion is little more than the equivalent of a Windows Service Pack, which are free and automatically delivered. </li>
<li><strong>Face Time</strong> - Face Time is no longer beta as it was with Snow Leopard and is fully integrated into Lion.</li>
<li><strong>Document locking</strong> - This grants you the ability to lock documents to prevent unwanted modifications. Not groundbreaking (see &#8216;read-only&#8217;), but the stuff Lion does behind the scenes, like automatically locking old documents, is pretty nice.</li>
<li><strong>Full disk encryption</strong> - No more is only your Home path safe. As of Lion, FileVault has been totally revamped and your entire disk will now be encrypted. </li>
<li><strong>Full screen apps</strong></li>
<li><strong>Resize windows from any edge</strong></li>
</ul>




<p>In addition to these nicer features, Lion did some really annoying stuff to user interaction and the user interface. I&#8217;m all for change for the better, but most of these fall under the category of &#8220;If it ain&#8217;t broke, don&#8217;t fix it.&#8221; Fortunately, there&#8217;s ways to get back the settings you expect. Here&#8217;s 5 I specifically ran into.</p>




<h2>Unhide ~/Library</h2>




<p>For whatever reason, Apple decided to hide your <i>~/Library</i> path. This is a real pain the ass if you find yourself in there a lot. For example, Appcelerator installs its SDK and other files in <i>~/Library/Application Support/Titanium</i>. I&#8217;m constantly tinkering in that directory and it would be nice to see it in Finder. </p>




<p>Execute this line in Terminal and you&#8217;ll have your <i>Library</i> visible once again. <strong>USERNAME</strong> is your username:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chflags nohidden /users/USERNAME/Library
</span></code></pre></td></tr></table></div></figure>




<h2>Disable &#8220;Natural&#8221; scrolling</h2>




<p>Lion has included &#8220;natural&#8221; scrolling. I use quotations around &#8220;natural&#8221; because it feels anything other than natural for the average user. The content you are scrolling will now move in the direction you scroll, which is essentially the opposite of how it has always worked.</p>




<p>I have no problem with this functionality. What I do take issue with is that this was made the default behavior. To set scrolling back to the way most of us expect it, open <strong>System Settings</strong>, go to <strong>Trackpad/Mouse</strong>, and in the <strong>Scroll/Zoom</strong> tab uncheck <strong>&#8220;Scroll direction: natural&#8221;</strong>.</p>




<p><img src="https://img.skitch.com/20110831-83ricxbahiq22edfpmfncnwp6c.jpg" alt="screen" title="" /></p>




<h2>Fix 3 finger horizontal swipe navigation</h2>




<p>The trackpad gesture I use more than any other is navigation using 3 finger swipes. I don&#8217;t even remember the last time I manually pressed the back button in a browser. No wait, yes I do. It was when I got my MacBook Air and it had Lion on it.</p>




<p>Turns out Apple mapped 2 finger horizontal swipes to its <strong>&#8220;Swipe between pages&#8221;</strong> functionality by default. Unfortunately, unless you switch this value to use 3 finger horizontal swipes, it won&#8217;t work for browser navigation. Check out the image below to see how:</p>




<p><img src="https://img.skitch.com/20110831-8unxrw8wbw5mum9ex61pmn4yha.jpg" alt="" title="" /></p>




<h2>Get Rid of LaunchPad</h2>




<p>If I wanted what is effectively a &#8220;Show Desktop&#8221; button combined with an applications list, I&#8217;d use Windows. Just remove that thing from your Dock and be done with it.</p>




<p>Do yourself a favor. If you really want an effective way to find and run apps, check out <a href="http://www.alfredapp.com/">Alfred</a> or <a href="http://qsapp.com/">Quicksilver</a>. You can thank me later.</p>


<div style="height:15px;"></div>




<h2>Get a Fresh Restart</h2>




<p>I don&#8217;t know about you, but I reboot my Mac really infrequently. When I do, though, it&#8217;s generally because I want a clean slate. I want all my apps closed and everything to go back to a fresh state. Lion disagrees with me.</p>




<p>By default Lion will remember every app you had open and make sure everything is just as you left it when you restarted your computer. For those of you who would also like a fresh restart, open <strong>System Settings</strong> and go to <strong>General</strong>. In there you just need to uncheck the <strong>&#8220;Restore windows when quitting and re-opening apps&#8221;</strong> checkbox.</p>




<p><img src="https://img.skitch.com/20110831-nugs2uasgdk7u3u51im5jw181m.jpg" alt="" title="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Intents in Appcelerator]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/08/26/android-intents-in-appcelerator/"/>
    <updated>2011-08-26T13:47:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/08/26/android-intents-in-appcelerator</id>
    <content type="html"><![CDATA[<h2>Link To Full Blog Post</h2>




<ul style="padding-top:15px;"><li><a href="http://developer.appcelerator.com/blog/2011/08/android-intents.html"><span style="font-size:large;">Android Intents on the Appcelerator Developer Blog</span></a></li></ul>




<h2>Here We Go Again</h2>


<p>OK, well I just did a post on how to use Android Intent Filters with Appcelerator, so why not the other side of the coin. This time you&#8217;ll learn how you can <b><i>send</i></b> Intents instead of receiving them. With this powerful native functionality you&#8217;ll be able to leverage existing apps on your Android device to do some of your heavy lifting, like sharing images, sending text, and a whole bunch of other things.</p>

<table>
  <tr>
    <td><img src="http://developer.appcelerator.com.s3.amazonaws.com/blog/post_images/intents/highlight.png" border="1"/></td>
    <td><img src="http://developer.appcelerator.com.s3.amazonaws.com/blog/post_images/intents/text%20intent%20list_small.png" border="1"/></td>
    <td><img src="http://developer.appcelerator.com.s3.amazonaws.com/blog/post_images/intents/intent%20list_small.png" border="1"/></td>
    <td><img src="http://developer.appcelerator.com.s3.amazonaws.com/blog/post_images/intents/google%20plus.png" border="1"/></td>
  </tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Intent Filters in Appcelerator]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/08/25/android-intent-filters-in-appcelerator/"/>
    <updated>2011-08-25T11:44:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/08/25/android-intent-filters-in-appcelerator</id>
    <content type="html"><![CDATA[<h2>Link To Full Blog Post</h2>




<ul style="padding-top:15px;"><li><a href="http://developer.appcelerator.com/blog/2011/08/android-intent-filters.html"><span style="font-size:large;">Android Intent Filters on the Appcelerator Developer Blog</span></a></li></ul>




<h2>It Starts&#8230;</h2>


<p>Here&#8217;s just a cross post of my first tutorial on the <a href="http://developer.appcelerator.com/blog/" target="_blank">Appcelerator Developer Blog</a>. It details how you can use Android Intent Filters to make your Appcelerator apps receive Intents from other Android applications. For example, I&#8217;m sure if you are an Android user you are familiar with the SEND Intent list:</p>

<p><img alt="Intent List" src="http://img.skitch.com/20110824-miirycem9smeikc864q2c2gnt5.jpg" title="Intent List" width="240" height="427" /></p>

<p>With this blog post I&#8217;ll show you how you can add your app to that list. It&#8217;s a great example of how Appcelerator still leverages powerful native functionality, both visual and non-visual, while it provides a cross platform solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Once, Adapt Everywhere]]></title>
    <link href="http://tonylukasavage.github.com/blog/2011/08/20/code-once--adapt-everywhere/"/>
    <updated>2011-08-20T17:14:00-04:00</updated>
    <id>http://tonylukasavage.github.com/blog/2011/08/20/code-once&#8211;adapt-everywhere</id>
    <content type="html"><![CDATA[<h2>CORE</h2>




<p>For the sake of not repeating myself I&#8217;m going to refer to the phrase &#8220;code once, run everywhere&#8221; as <strong>CORE</strong> from here on in. Who knows, maybe it&#8217;ll catch on.  And on to the blog post&#8230;</p>




<p>So as you may have heard by now, I&#8217;ll be starting my new job as an <a href="">Appcelerator</a> platform evangelist on Monday. If you&#8217;ve read some of my past blog posts, you&#8217;ve probably noted that I&#8217;ve been pretty critical of cross platform mobile solutions. From a developer&#8217;s perspective, we are expecting the coveted CORE, but are often left wanting. </p>




<p>What you&#8217;ll quickly find in the world of mobile development is that cross platform does not always equal CORE. </p>




<p>Rather than bemoan the shortcomings of each mobile framework, I&#8217;d rather talk about something I heard <a href="http://twitter.com/#!/kevinwhinnery">Kevin Whinnery</a> say during the Appcelerator <a href="http://vimeopro.com/appcelerator/building-native-mobile-applications">online training videos</a>. He stated that Appcelerator does not aim to be a CORE technology, but instead a <strong>&#8220;code once, <em>adapt</em> everywhere&#8221;</strong> one. Not quite as sexy, but perhaps an even more intriguing philosophy. Let&#8217;s discuss why.</p>




<h2>Web Based vs. Appcelerator</h2>




<p><em>For a quick summary of how Appcelerator is fundamentally different than web-based cross platform mobile frameworks, <a href="http://tonylukasavage.github.com/blog/2011/05/25/review--phonegap-is-web-based--appcelerator-is-pure-javascript/">read here</a>.</em></p>




<p>Aside from near-native performance, what&#8217;s the biggest advantage of using Appcelerator over web based mobile frameworks like <a href="http://www.phonegap.com/">Phonegap</a> or <a href="http://rhomobile.com/">Rhomobile</a>? Its ability to use the device&#8217;s native UI components. And no, I don&#8217;t mean it has UI components skinned to look like native components, like many of the web-based solutions. I mean it actually uses the platform&#8217;s native, performant UI in the app.</p>




<p>With native UI we can build apps that are indistinguishable from apps built with Objective-C or Java. The look, feel, performance, and behavior will be exactly what is expected of the given platform. Plus, we don&#8217;t have to build them ourselves. </p>




<p>To achieve this level of quality, though, <strong>you need to be willing to adapt your app, not just design for the lowest common denominator</strong>, as is often the mentality with CORE apps. Sure, you can use the iPhone&#8217;s slick Navigation Controller bar on all versions of your app, but is that what Android users are expecting? Nor would an Android Spinner be befitting of an iPhone app.</p>




<p>You see, in some cases, CORE apps come at the expense of the most important factor: the user experience. </p>




<h2>Why Bother?</h2>




<p>Many people, particularly proponents of web based mobile development, are of the opinion that native UI components are not necessary to deliver a high quality user experience. I agree, in certain circumstances. Games, novelty utilities (think <a href="https://market.android.com/details?id=com.devuni.flashlight&amp;feature=search_result">Flashlight</a>), and otherwise simple apps are good examples that probably don&#8217;t benefit much from a native experience.</p>




<p>In my opinion, though, it&#8217;s a necessity for more complex apps, particularly ones leveraging native APIs, to use the UI that is  familiar to the device. They need to work in a simple, intuitive manner as mobile users can be quick on the trigger in deeming an app unfriendly. Those who have spent time developing for multiple platforms understand that <strong>the users of each platform have different expectations</strong>. </p>




<p>I don&#8217;t want a navigation bar in my Android app. I want my tabs at the bottom on iPhone, the top on Android. I want to press my menu button on Android to get my app&#8217;s options. I want my system buttons to look familiar. I want to pull to refresh on my iPhone. </p>




<p>Let me be clear that both Appcelerator and web-based frameworks have the ability to adapt their apps to supported platforms. And I don&#8217;t just mean churning out a basic app, I mean creating a high quality, native app. Depending on your point of view, however, one may be much more appealing than the other.</p>




<h2>Attending to the UI (Web-based)</h2>




<p>With web-based solutions, the app exists in a web view container. This means that you are effectively building a native app that consists of only a web view which hosts a web application. <strong>You have no native components with which to work</strong>. This leaves us with 2 options for building the UI of the app (super quick assessment coming): </p>




<ol>
<li>Use a 3rd party framework like <a href="http://jquerymobile.com/">jQuery Mobile</a> or <a href="http://www.sencha.com/products/touch/">Sencha Touch</a>
<ul><li>Pros
<ul><li>Lots of functionality and UI components</li>
<li>Speeds up development process</li>
<li>Some, like Sencha Touch, have a very native look to their components.</li></ul></li>
<li>Cons
<ul><li>Web based framework UI is generally less responsive than ones created natively or with Appcelerator on mobile devices.</li>
<li>Additional learning curve for the added framework</li>
<li>You are even further removed from the native app. You now have a UI framework which sits on a native web view wrapper which then becomes a native app. Lots to know and lots of places for things to go wrong.</li>
<li>Frameworks like Sencha Touch are limited to webkit based web views (iOS, Android, BB 6.0+). This essentially removes the biggest advantage of web based frameworks, which is their compatibility.</li></ul></li></ul></li>
<li>Create the UI yourself with HTML/CSS/JS
<ul><li>Pros
<ul><li>Totally customizable for any platform </li>
<li>Its easier to manage performance and UI inconsistencies when using code for only what you need to achieve</li>
<li>No additional learning curve beyond basic web dev and understanding your web based framework of choice. </li></ul></li>
<li>Cons
<ul><li>Much slower to develop, as you have to build your UI from scratch. The styling of the UI to look native all falls on you or external resources you can find.</li>
<li>Even for seasoned web devs, managing cross platform mobile CSS can be a daunting task. </li>
<li>All cross browser inconsistencies become your job to address, unless you use a light JS framework like <a href="http://xuijs.com/">xuijs</a> or <a href="http://zeptojs.com/">zeptojs</a>.</li></ul></li></ul></li>
</ol>




<p>So as you can see, web based mobile development encounters many of the same issues that traditional web development does. And the problem is compounded when you are trying to make these web based solutions look, feel, perform, and behave natively.</p>




<h2>Attending to the UI (Appcelerator)</h2>




<p>Appcelerator apps are built differently. The extremely short version is that Appcelerator Javascript code is mapped to native symbols of the target platform. Any code that can&#8217;t be mapped to a native symbol is run through a Javascript interpreter. <a href="http://twitter.com/#!/jhaynie">Jeff Haynie</a>, CEO of Appcelerator, does a much better job of explaining it in <a href="http://stackoverflow.com/questions/2444001/how-does-appcelerator-titanium-mobile-work">this StackOverflow post</a>.</p>




<p>What this means that there are <strong>no 3rd party tools or special code necessary to create totally native components</strong>. You want a button that has native appearance and behavior on both iPhone and Android?</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">button</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createButton</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span><span class="s1">&#39;test button&#39;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>There you go, an Android and iPhone button respectively. How &#8216;bout a table view populated with sample data?</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[{</span><span class="nx">title</span><span class="o">:</span><span class="s2">&quot;Row 1&quot;</span><span class="p">},{</span><span class="nx">title</span><span class="o">:</span><span class="s2">&quot;Row 2&quot;</span><span class="p">},{</span><span class="nx">title</span><span class="o">:</span><span class="s2">&quot;Row 3&quot;</span><span class="p">},{</span><span class="nx">title</span><span class="o">:</span><span class="s2">&quot;Row 4&quot;</span><span class="p">},{</span><span class="nx">title</span><span class="o">:</span><span class="s2">&quot;Row 5&quot;</span><span class="p">},{</span><span class="nx">title</span><span class="o">:</span><span class="s2">&quot;Row 6&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">table</span> <span class="o">=</span> <span class="nx">Titanium</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createTableView</span><span class="p">({</span><span class="nx">data</span><span class="o">:</span><span class="nx">data</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>Yep, it&#8217;s that simple. The iPhone table will even have the bounce scrolling users expect. You have the same simplicity that web based UI frameworks solutions provide, except you are additionally getting native look, feel, performance, and behavior. The components are even designable as you would expect them to be.</p>




<p>The one drawback to this simplicity is that without careful attention to your code, you can end up with a mess of interlacing UI and logic. Android has XML for layout, iOS has .nib/.xib files, web based solutions have HTML/CSS. Appcelerator, <em>for the time being</em>, relies solely on your Javascript code. Javascript MVC frameworks, like <a href="http://puremvc.org/">PureMVC</a>, and attention to best practices (as mentioned in the <a href="http://vimeopro.com/appcelerator/building-native-mobile-applications">online training videos</a>) can mitigate this risk. There are even some vague rumblings of a more declarative syntax for UI design in the future&#8230; </p>




<h2>Adaptation</h2>




<p>So now that we know how UIs are built in both Appcelerator and web-based frameworks, how do we adapt them in such a way to deliver a native user experience? Despite the differences between the frameworks mentioned so far, the solution is fairly common among all frameworks. </p>




<p>While I will confidently say that Appcelerator has the abstraction that delivers the most familiar and device-specific experience, it too needs to account for usability that is not necessarily CORE. And even saying it is not CORE can be a bit of a misnomer as the same code base can be used by multiple platforms. It just requires the clever and judicious insertion of platform specific code facilitated by your mobile framework&#8217;s device identification APIs.</p>




<p>Let&#8217;s take a quick look at how Appcelerator identifies your device and can act on the information:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">osname</span> <span class="o">=</span> <span class="nx">Titanium</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">osname</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">osname</span> <span class="o">==</span> <span class="s1">&#39;android&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// android specific code</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">osname</span> <span class="o">==</span> <span class="s1">&#39;iphone&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// iphone specific code</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">osname</span> <span class="o">==</span> <span class="s1">&#39;ipad&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ipad specific code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>For a more in depth example of how you can use this logic to create truly cross platform components and functionality, check out the 6 minute screencast <a href="http://developer.appcelerator.com/blog/2011/08/forging-titanium-episode-2-a-cross-platform-navigation-controller.html">&#8220;Forging Titanium: A Cross-Platform Navigation Controller.&#8221;</a> Or just watch this:</p>




<iframe src="http://player.vimeo.com/video/27834295?title=0&amp;byline=0&amp;portrait=0" width="600" height="375" frameborder="0"></iframe>




<p>And for reference, let&#8217;s look at PhoneGap&#8217;s adaptation method as well, just to show the similarities:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">platform</span> <span class="o">=</span> <span class="nx">device</span><span class="p">.</span><span class="nx">platform</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="nx">platform</span> <span class="o">==</span> <span class="s1">&#39;Android&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// android specific code</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">platform</span> <span class="o">==</span> <span class="s1">&#39;iPhone&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// iphone specific code</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">platform</span> <span class="o">==</span> <span class="s1">&#39;BlackBerry&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// blackberry specific code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>Very similar indeed, but you need to consider the 2 prior &#8220;Attending to the UI&#8221; sections before calling them equal. Its the frequency with which you are required to apply this and other types of adaptation that affects the maintainability of your app as it grows.</p>




<h2>Minimizing Adaptation</h2>




<p>It doesn&#8217;t take an expert software engineer to see that conditional checks on the device&#8217;s platform throughout your code isn&#8217;t ideal. It gets harder to maintain the more conditionals you include. It becomes apparent that we need our development framework to do most of this work for us.</p>




<p>In the case of Appcelerator, the need for conditional adaptation is minimized by the fact that you can utilize native UI components. Look back at our examples of the buttons and table views. There was no conditional code, no special handling. You get system specific components with no extra effort. </p>




<p>You really only need conditional code when you want to leverage native components that don&#8217;t have an equivalent on your other target platforms. For example, if you haven&#8217;t already, check out the <a href="http://developer.appcelerator.com/blog/2011/08/forging-titanium-episode-2-a-cross-platform-navigation-controller.html">Cross-Platform Navigation Controller video</a> above. It shows how you can use these conditionals to create navigation code that you can use seamlessly between iOS or Android.</p>




<p>Web based platforms also do a great job of creating an abstraction so that you don&#8217;t need to use conditionals for each supported platform. The problem, as discussed earlier, is that these abstractions don&#8217;t represent actual native components. They most often represent HTML/CSS/JS that are attempting to mimic native components. Worse yet, sometimes they are components that have no relation to existing native components, yet find themselves in native apps. As I said, this is a point of contention among mobile developers, and I&#8217;ll leave further discussion for the comments if necessary.</p>




<p>What web based frameworks can&#8217;t give you in native components, they provide in CSS, often applied dynamically via Javascript. The use of CSS is a double-edged sword. On one hand, you have a method of styling that not only allows you to skin your whole app, but also affords you the opportunity to gracefully degrade the styling based on the user&#8217;s device. This is why web based solutions typically support more platforms than ones like Appcelerator. Add all the bells and whistles like rounded corners, drop shadows, webkit transitions, etc&#8230; and if the device doesn&#8217;t support them, they will disappear without interrupting the user experience.</p>




<p>On the other hand, unless you are a CSS wizard with existing knowledge of CSS3 and how it applies to mobile, using it can be difficult. You can find yourself with mountains of CSS attempting to mimic components that are created with a single line of code in Appcelerator. For example, here&#8217;s a shiny iPhone button in pure CSS:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">button</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-family</span><span class="o">:</span> <span class="s2">&quot;Helvetica Neue&quot;</span><span class="o">,</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">1.3em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">97</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">3px</span> <span class="k">solid</span> <span class="m">#282726</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">gradient</span><span class="p">(</span> <span class="n">linear</span><span class="o">,</span> <span class="k">left</span> <span class="k">top</span><span class="o">,</span> <span class="k">left</span> <span class="k">bottom</span><span class="o">,</span> <span class="n">from</span><span class="p">(</span><span class="m">#e2e2e2</span><span class="p">)</span><span class="o">,</span> <span class="n">to</span><span class="p">(</span><span class="m">#8c8a88</span><span class="p">)</span><span class="o">,</span> <span class="k">color</span><span class="o">-</span><span class="n">stop</span><span class="p">(</span><span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="o">,</span> <span class="m">#acadae</span><span class="p">)</span><span class="o">,</span> <span class="k">color</span><span class="o">-</span><span class="n">stop</span><span class="p">(</span><span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="o">,</span> <span class="m">#82807e</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">3px</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-shadow</span><span class="o">:</span> <span class="m">0px</span> <span class="m">1px</span> <span class="m">0</span> <span class="m">#cecece</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">background</span><span class="o">-</span><span class="n">origin</span><span class="o">:</span> <span class="k">padding</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">background</span><span class="o">-</span><span class="k">clip</span><span class="o">:</span> <span class="k">border</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">8px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">button</span><span class="o">]</span><span class="nd">:hover</span><span class="o">,</span> <span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">button</span><span class="o">]</span><span class="nc">.cancel</span><span class="o">,</span>
</span><span class='line'><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">button</span><span class="o">]</span><span class="nd">:active</span><span class="o">,</span> <span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">button</span><span class="o">]</span><span class="nc">.cancel</span><span class="nd">:active</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">button</span><span class="o">]</span><span class="nd">:hover</span><span class="o">,</span> <span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">button</span><span class="o">]</span><span class="nc">.cancel</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">gradient</span><span class="p">(</span> <span class="n">linear</span><span class="o">,</span> <span class="k">left</span> <span class="k">top</span><span class="o">,</span> <span class="k">left</span> <span class="k">bottom</span><span class="o">,</span> <span class="n">from</span><span class="p">(</span><span class="m">#aaaee5</span><span class="p">)</span><span class="o">,</span> <span class="n">to</span><span class="p">(</span><span class="m">#10006d</span><span class="p">)</span><span class="o">,</span> <span class="k">color</span><span class="o">-</span><span class="n">stop</span><span class="p">(</span><span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="o">,</span> <span class="m">#1F3B97</span><span class="p">)</span><span class="o">,</span> <span class="k">color</span><span class="o">-</span><span class="n">stop</span><span class="p">(</span><span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="o">,</span> <span class="m">#081f6f</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">button</span><span class="o">]</span><span class="nc">.cancel</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">gradient</span><span class="p">(</span> <span class="n">linear</span><span class="o">,</span> <span class="k">left</span> <span class="k">top</span><span class="o">,</span> <span class="k">left</span> <span class="k">bottom</span><span class="o">,</span> <span class="n">from</span><span class="p">(</span><span class="m">#5c5c5b</span><span class="p">)</span><span class="o">,</span> <span class="n">to</span><span class="p">(</span><span class="m">#1e1b16</span><span class="p">)</span><span class="o">,</span> <span class="k">color</span><span class="o">-</span><span class="n">stop</span><span class="p">(</span><span class="m">0</span><span class="o">.</span><span class="m">2</span><span class="o">,</span> <span class="m">#1e1b16</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">6px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>It does the job, but man, it is really cumbersome. Again, this is all a factor of wanting to create a native experience. Some will contest that it does not need to be this complex, that as long as the UI is uniform it does not need to conform to the native expectations. This mentality, though, is typically only held by those who back mobile frameworks that are incapable of delivering that native experience.  As the local radio sports caster in Pittsburgh likes to  say, &#8220;Not hatin&#8217;, just sayin&#8217;.&#8221;</p>




<h2>Summary</h2>




<p>You can&#8217;t beat web based mobile development for platform compatibility. Every mobile device has a browser that supports HTML/CSS/JS, right? You can create UIs that work on many platforms and degrade gracefully to handle lower end devices. Quality, usable apps are totally possible with these frameworks.</p>




<p>But the user doesn&#8217;t care how compatible your app is. They just want it to work, as they expect it to, on the device of their choice. In this respect, Appcelerator is unparalleled in the realm of cross platform solutions.</p>




<p>I have a strong suspicion that web based mobile technologies are only going to get better. I mean, let&#8217;s face it, the web isn&#8217;t going to be disappearing anytime soon. It will get faster, more functional, and closer to the expectations of the mobile user, just like desktop web browsers. And I, as a soon-to-be Appcelerator employee, welcome this. </p>




<p>As web based mobile development ups it game, so shall Appcelerator. Whether you&#8217;re an Appcelerator, web based, or native developer, it&#8217;s an exciting time&#8230; no matter what side of the fence you&#8217;re on.</p>

]]></content>
  </entry>
  
</feed>
